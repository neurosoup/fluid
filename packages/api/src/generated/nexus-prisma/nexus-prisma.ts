/**
 * This file was automatically generated by nexus-prisma@0.3.7
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      User: UserObject
      EndUser: EndUserObject
      Agent: AgentObject
      Network: NetworkObject
      UserConnection: UserConnectionObject
      PageInfo: PageInfoObject
      UserEdge: UserEdgeObject
      AggregateUser: AggregateUserObject
      AgentConnection: AgentConnectionObject
      AgentEdge: AgentEdgeObject
      AggregateAgent: AggregateAgentObject
      EndUserConnection: EndUserConnectionObject
      EndUserEdge: EndUserEdgeObject
      AggregateEndUser: AggregateEndUserObject
      NetworkConnection: NetworkConnectionObject
      NetworkEdge: NetworkEdgeObject
      AggregateNetwork: AggregateNetworkObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      UserSubscriptionPayload: UserSubscriptionPayloadObject
      UserPreviousValues: UserPreviousValuesObject
      AgentSubscriptionPayload: AgentSubscriptionPayloadObject
      AgentPreviousValues: AgentPreviousValuesObject
      EndUserSubscriptionPayload: EndUserSubscriptionPayloadObject
      EndUserPreviousValues: EndUserPreviousValuesObject
      NetworkSubscriptionPayload: NetworkSubscriptionPayloadObject
      NetworkPreviousValues: NetworkPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      User: UserFieldDetails
      EndUser: EndUserFieldDetails
      Agent: AgentFieldDetails
      Network: NetworkFieldDetails
      UserConnection: UserConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      UserEdge: UserEdgeFieldDetails
      AggregateUser: AggregateUserFieldDetails
      AgentConnection: AgentConnectionFieldDetails
      AgentEdge: AgentEdgeFieldDetails
      AggregateAgent: AggregateAgentFieldDetails
      EndUserConnection: EndUserConnectionFieldDetails
      EndUserEdge: EndUserEdgeFieldDetails
      AggregateEndUser: AggregateEndUserFieldDetails
      NetworkConnection: NetworkConnectionFieldDetails
      NetworkEdge: NetworkEdgeFieldDetails
      AggregateNetwork: AggregateNetworkFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      UserSubscriptionPayload: UserSubscriptionPayloadFieldDetails
      UserPreviousValues: UserPreviousValuesFieldDetails
      AgentSubscriptionPayload: AgentSubscriptionPayloadFieldDetails
      AgentPreviousValues: AgentPreviousValuesFieldDetails
      EndUserSubscriptionPayload: EndUserSubscriptionPayloadFieldDetails
      EndUserPreviousValues: EndUserPreviousValuesFieldDetails
      NetworkSubscriptionPayload: NetworkSubscriptionPayloadFieldDetails
      NetworkPreviousValues: NetworkPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      UserWhereUniqueInput: UserWhereUniqueInputInputObject
      EndUserWhereInput: EndUserWhereInputInputObject
      AgentWhereInput: AgentWhereInputInputObject
      NetworkWhereInput: NetworkWhereInputInputObject
      UserWhereInput: UserWhereInputInputObject
      AgentWhereUniqueInput: AgentWhereUniqueInputInputObject
      EndUserWhereUniqueInput: EndUserWhereUniqueInputInputObject
      NetworkWhereUniqueInput: NetworkWhereUniqueInputInputObject
      UserCreateInput: UserCreateInputInputObject
      EndUserCreateManyWithoutUsersInput: EndUserCreateManyWithoutUsersInputInputObject
      EndUserCreateWithoutUsersInput: EndUserCreateWithoutUsersInputInputObject
      AgentCreateManyWithoutEndUserInput: AgentCreateManyWithoutEndUserInputInputObject
      AgentCreateWithoutEndUserInput: AgentCreateWithoutEndUserInputInputObject
      NetworkCreateManyWithoutMasterInput: NetworkCreateManyWithoutMasterInputInputObject
      NetworkCreateWithoutMasterInput: NetworkCreateWithoutMasterInputInputObject
      AgentCreateManyWithoutNetworksInput: AgentCreateManyWithoutNetworksInputInputObject
      AgentCreateWithoutNetworksInput: AgentCreateWithoutNetworksInputInputObject
      EndUserCreateOneWithoutAgentsInput: EndUserCreateOneWithoutAgentsInputInputObject
      EndUserCreateWithoutAgentsInput: EndUserCreateWithoutAgentsInputInputObject
      UserCreateManyWithoutEndUsersInput: UserCreateManyWithoutEndUsersInputInputObject
      UserCreateWithoutEndUsersInput: UserCreateWithoutEndUsersInputInputObject
      NetworkCreateManyWithoutSlavesInput: NetworkCreateManyWithoutSlavesInputInputObject
      NetworkCreateWithoutSlavesInput: NetworkCreateWithoutSlavesInputInputObject
      AgentCreateOneWithoutOwnedNetworksInput: AgentCreateOneWithoutOwnedNetworksInputInputObject
      AgentCreateWithoutOwnedNetworksInput: AgentCreateWithoutOwnedNetworksInputInputObject
      UserUpdateInput: UserUpdateInputInputObject
      EndUserUpdateManyWithoutUsersInput: EndUserUpdateManyWithoutUsersInputInputObject
      EndUserUpdateWithWhereUniqueWithoutUsersInput: EndUserUpdateWithWhereUniqueWithoutUsersInputInputObject
      EndUserUpdateWithoutUsersDataInput: EndUserUpdateWithoutUsersDataInputInputObject
      AgentUpdateManyWithoutEndUserInput: AgentUpdateManyWithoutEndUserInputInputObject
      AgentUpdateWithWhereUniqueWithoutEndUserInput: AgentUpdateWithWhereUniqueWithoutEndUserInputInputObject
      AgentUpdateWithoutEndUserDataInput: AgentUpdateWithoutEndUserDataInputInputObject
      NetworkUpdateManyWithoutMasterInput: NetworkUpdateManyWithoutMasterInputInputObject
      NetworkUpdateWithWhereUniqueWithoutMasterInput: NetworkUpdateWithWhereUniqueWithoutMasterInputInputObject
      NetworkUpdateWithoutMasterDataInput: NetworkUpdateWithoutMasterDataInputInputObject
      AgentUpdateManyWithoutNetworksInput: AgentUpdateManyWithoutNetworksInputInputObject
      AgentUpdateWithWhereUniqueWithoutNetworksInput: AgentUpdateWithWhereUniqueWithoutNetworksInputInputObject
      AgentUpdateWithoutNetworksDataInput: AgentUpdateWithoutNetworksDataInputInputObject
      EndUserUpdateOneWithoutAgentsInput: EndUserUpdateOneWithoutAgentsInputInputObject
      EndUserUpdateWithoutAgentsDataInput: EndUserUpdateWithoutAgentsDataInputInputObject
      UserUpdateManyWithoutEndUsersInput: UserUpdateManyWithoutEndUsersInputInputObject
      UserUpdateWithWhereUniqueWithoutEndUsersInput: UserUpdateWithWhereUniqueWithoutEndUsersInputInputObject
      UserUpdateWithoutEndUsersDataInput: UserUpdateWithoutEndUsersDataInputInputObject
      UserUpsertWithWhereUniqueWithoutEndUsersInput: UserUpsertWithWhereUniqueWithoutEndUsersInputInputObject
      UserScalarWhereInput: UserScalarWhereInputInputObject
      UserUpdateManyWithWhereNestedInput: UserUpdateManyWithWhereNestedInputInputObject
      UserUpdateManyDataInput: UserUpdateManyDataInputInputObject
      EndUserUpsertWithoutAgentsInput: EndUserUpsertWithoutAgentsInputInputObject
      AgentUpsertWithWhereUniqueWithoutNetworksInput: AgentUpsertWithWhereUniqueWithoutNetworksInputInputObject
      AgentScalarWhereInput: AgentScalarWhereInputInputObject
      AgentUpdateManyWithWhereNestedInput: AgentUpdateManyWithWhereNestedInputInputObject
      AgentUpdateManyDataInput: AgentUpdateManyDataInputInputObject
      NetworkUpsertWithWhereUniqueWithoutMasterInput: NetworkUpsertWithWhereUniqueWithoutMasterInputInputObject
      NetworkScalarWhereInput: NetworkScalarWhereInputInputObject
      NetworkUpdateManyWithWhereNestedInput: NetworkUpdateManyWithWhereNestedInputInputObject
      NetworkUpdateManyDataInput: NetworkUpdateManyDataInputInputObject
      NetworkUpdateManyWithoutSlavesInput: NetworkUpdateManyWithoutSlavesInputInputObject
      NetworkUpdateWithWhereUniqueWithoutSlavesInput: NetworkUpdateWithWhereUniqueWithoutSlavesInputInputObject
      NetworkUpdateWithoutSlavesDataInput: NetworkUpdateWithoutSlavesDataInputInputObject
      AgentUpdateOneRequiredWithoutOwnedNetworksInput: AgentUpdateOneRequiredWithoutOwnedNetworksInputInputObject
      AgentUpdateWithoutOwnedNetworksDataInput: AgentUpdateWithoutOwnedNetworksDataInputInputObject
      AgentUpsertWithoutOwnedNetworksInput: AgentUpsertWithoutOwnedNetworksInputInputObject
      NetworkUpsertWithWhereUniqueWithoutSlavesInput: NetworkUpsertWithWhereUniqueWithoutSlavesInputInputObject
      AgentUpsertWithWhereUniqueWithoutEndUserInput: AgentUpsertWithWhereUniqueWithoutEndUserInputInputObject
      EndUserUpsertWithWhereUniqueWithoutUsersInput: EndUserUpsertWithWhereUniqueWithoutUsersInputInputObject
      EndUserScalarWhereInput: EndUserScalarWhereInputInputObject
      EndUserUpdateManyWithWhereNestedInput: EndUserUpdateManyWithWhereNestedInputInputObject
      EndUserUpdateManyDataInput: EndUserUpdateManyDataInputInputObject
      UserUpdateManyMutationInput: UserUpdateManyMutationInputInputObject
      AgentCreateInput: AgentCreateInputInputObject
      AgentUpdateInput: AgentUpdateInputInputObject
      AgentUpdateManyMutationInput: AgentUpdateManyMutationInputInputObject
      EndUserCreateInput: EndUserCreateInputInputObject
      EndUserUpdateInput: EndUserUpdateInputInputObject
      EndUserUpdateManyMutationInput: EndUserUpdateManyMutationInputInputObject
      NetworkCreateInput: NetworkCreateInputInputObject
      NetworkUpdateInput: NetworkUpdateInputInputObject
      NetworkUpdateManyMutationInput: NetworkUpdateManyMutationInputInputObject
      UserSubscriptionWhereInput: UserSubscriptionWhereInputInputObject
      AgentSubscriptionWhereInput: AgentSubscriptionWhereInputInputObject
      EndUserSubscriptionWhereInput: EndUserSubscriptionWhereInputInputObject
      NetworkSubscriptionWhereInput: NetworkSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    EndUserOrderByInput: EndUserOrderByInputValues,
    AgentOrderByInput: AgentOrderByInputValues,
    NetworkOrderByInput: NetworkOrderByInputValues,
    UserOrderByInput: UserOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'user', args?: QueryUserArgs[] | false, alias?: string  } 
  | { name: 'users', args?: QueryUsersArgs[] | false, alias?: string  } 
  | { name: 'usersConnection', args?: QueryUsersConnectionArgs[] | false, alias?: string  } 
  | { name: 'agent', args?: QueryAgentArgs[] | false, alias?: string  } 
  | { name: 'agents', args?: QueryAgentsArgs[] | false, alias?: string  } 
  | { name: 'agentsConnection', args?: QueryAgentsConnectionArgs[] | false, alias?: string  } 
  | { name: 'endUser', args?: QueryEndUserArgs[] | false, alias?: string  } 
  | { name: 'endUsers', args?: QueryEndUsersArgs[] | false, alias?: string  } 
  | { name: 'endUsersConnection', args?: QueryEndUsersConnectionArgs[] | false, alias?: string  } 
  | { name: 'network', args?: QueryNetworkArgs[] | false, alias?: string  } 
  | { name: 'networks', args?: QueryNetworksArgs[] | false, alias?: string  } 
  | { name: 'networksConnection', args?: QueryNetworksConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'user'
  | 'users'
  | 'usersConnection'
  | 'agent'
  | 'agents'
  | 'agentsConnection'
  | 'endUser'
  | 'endUsers'
  | 'endUsersConnection'
  | 'network'
  | 'networks'
  | 'networksConnection'


type QueryUserArgs =
  | 'where'
type QueryUsersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUsersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryAgentArgs =
  | 'where'
type QueryAgentsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryAgentsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryEndUserArgs =
  | 'where'
type QueryEndUsersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryEndUsersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryNetworkArgs =
  | 'where'
type QueryNetworksArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryNetworksConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  user: {
    type: 'User'
    args: Record<QueryUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  users: {
    type: 'User'
    args: Record<QueryUsersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
  usersConnection: {
    type: 'UserConnection'
    args: Record<QueryUsersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserConnection> | prisma.UserConnection
  }
  agent: {
    type: 'Agent'
    args: Record<QueryAgentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: AgentWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Agent | null> | prisma.Agent | null
  }
  agents: {
    type: 'Agent'
    args: Record<QueryAgentsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: AgentWhereInput | null, orderBy?: prisma.AgentOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Agent[]> | prisma.Agent[]
  }
  agentsConnection: {
    type: 'AgentConnection'
    args: Record<QueryAgentsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: AgentWhereInput | null, orderBy?: prisma.AgentOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AgentConnection> | prisma.AgentConnection
  }
  endUser: {
    type: 'EndUser'
    args: Record<QueryEndUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: EndUserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EndUser | null> | prisma.EndUser | null
  }
  endUsers: {
    type: 'EndUser'
    args: Record<QueryEndUsersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: EndUserWhereInput | null, orderBy?: prisma.EndUserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EndUser[]> | prisma.EndUser[]
  }
  endUsersConnection: {
    type: 'EndUserConnection'
    args: Record<QueryEndUsersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: EndUserWhereInput | null, orderBy?: prisma.EndUserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EndUserConnection> | prisma.EndUserConnection
  }
  network: {
    type: 'Network'
    args: Record<QueryNetworkArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: NetworkWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Network | null> | prisma.Network | null
  }
  networks: {
    type: 'Network'
    args: Record<QueryNetworksArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: NetworkWhereInput | null, orderBy?: prisma.NetworkOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Network[]> | prisma.Network[]
  }
  networksConnection: {
    type: 'NetworkConnection'
    args: Record<QueryNetworksConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: NetworkWhereInput | null, orderBy?: prisma.NetworkOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.NetworkConnection> | prisma.NetworkConnection
  }
}
  

// Types for User

type UserObject =
  | UserFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'password', args?: [] | false, alias?: string  } 
  | { name: 'endUsers', args?: UserEndUsersArgs[] | false, alias?: string  } 

type UserFields =
  | 'id'
  | 'name'
  | 'email'
  | 'password'
  | 'endUsers'


type UserEndUsersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface UserFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  password: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  endUsers: {
    type: 'EndUser'
    args: Record<UserEndUsersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: EndUserWhereInput | null, orderBy?: prisma.EndUserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EndUser[]> | prisma.EndUser[]
  }
}
  

// Types for EndUser

type EndUserObject =
  | EndUserFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'agents', args?: EndUserAgentsArgs[] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'fullName', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'users', args?: EndUserUsersArgs[] | false, alias?: string  } 

type EndUserFields =
  | 'id'
  | 'agents'
  | 'createdAt'
  | 'email'
  | 'fullName'
  | 'updatedAt'
  | 'users'


type EndUserAgentsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type EndUserUsersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface EndUserFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  agents: {
    type: 'Agent'
    args: Record<EndUserAgentsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"EndUser">,
      args: { where?: AgentWhereInput | null, orderBy?: prisma.AgentOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Agent[]> | prisma.Agent[]
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  fullName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  users: {
    type: 'User'
    args: Record<EndUserUsersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"EndUser">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
}
  

// Types for Agent

type AgentObject =
  | AgentFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'endUser', args?: [] | false, alias?: string  } 
  | { name: 'nickname', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'tag', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'ownedNetworks', args?: AgentOwnedNetworksArgs[] | false, alias?: string  } 
  | { name: 'networks', args?: AgentNetworksArgs[] | false, alias?: string  } 

type AgentFields =
  | 'id'
  | 'createdAt'
  | 'endUser'
  | 'nickname'
  | 'email'
  | 'tag'
  | 'updatedAt'
  | 'ownedNetworks'
  | 'networks'


type AgentOwnedNetworksArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type AgentNetworksArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface AgentFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  endUser: {
    type: 'EndUser'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Agent">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EndUser | null> | prisma.EndUser | null
  }
  nickname: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  tag: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  ownedNetworks: {
    type: 'Network'
    args: Record<AgentOwnedNetworksArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Agent">,
      args: { where?: NetworkWhereInput | null, orderBy?: prisma.NetworkOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Network[]> | prisma.Network[]
  }
  networks: {
    type: 'Network'
    args: Record<AgentNetworksArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Agent">,
      args: { where?: NetworkWhereInput | null, orderBy?: prisma.NetworkOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Network[]> | prisma.Network[]
  }
}
  

// Types for Network

type NetworkObject =
  | NetworkFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'master', args?: [] | false, alias?: string  } 
  | { name: 'slaves', args?: NetworkSlavesArgs[] | false, alias?: string  } 

type NetworkFields =
  | 'id'
  | 'name'
  | 'description'
  | 'master'
  | 'slaves'


type NetworkSlavesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface NetworkFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  master: {
    type: 'Agent'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Network">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Agent> | prisma.Agent
  }
  slaves: {
    type: 'Agent'
    args: Record<NetworkSlavesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Network">,
      args: { where?: AgentWhereInput | null, orderBy?: prisma.AgentOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Agent[]> | prisma.Agent[]
  }
}
  

// Types for UserConnection

type UserConnectionObject =
  | UserConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type UserConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface UserConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'UserEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserEdge[]> | prisma.UserEdge[]
  }
  aggregate: {
    type: 'AggregateUser'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateUser> | prisma.AggregateUser
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for UserEdge

type UserEdgeObject =
  | UserEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type UserEdgeFields =
  | 'node'
  | 'cursor'



  

export interface UserEdgeFieldDetails {
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateUser

type AggregateUserObject =
  | AggregateUserFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateUserFields =
  | 'count'



  

export interface AggregateUserFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AgentConnection

type AgentConnectionObject =
  | AgentConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type AgentConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface AgentConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AgentConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'AgentEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"AgentConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AgentEdge[]> | prisma.AgentEdge[]
  }
  aggregate: {
    type: 'AggregateAgent'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AgentConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateAgent> | prisma.AggregateAgent
  }
}
  

// Types for AgentEdge

type AgentEdgeObject =
  | AgentEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type AgentEdgeFields =
  | 'node'
  | 'cursor'



  

export interface AgentEdgeFieldDetails {
  node: {
    type: 'Agent'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AgentEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Agent> | prisma.Agent
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateAgent

type AggregateAgentObject =
  | AggregateAgentFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateAgentFields =
  | 'count'



  

export interface AggregateAgentFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for EndUserConnection

type EndUserConnectionObject =
  | EndUserConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type EndUserConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface EndUserConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EndUserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'EndUserEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"EndUserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EndUserEdge[]> | prisma.EndUserEdge[]
  }
  aggregate: {
    type: 'AggregateEndUser'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EndUserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateEndUser> | prisma.AggregateEndUser
  }
}
  

// Types for EndUserEdge

type EndUserEdgeObject =
  | EndUserEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type EndUserEdgeFields =
  | 'node'
  | 'cursor'



  

export interface EndUserEdgeFieldDetails {
  node: {
    type: 'EndUser'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EndUserEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EndUser> | prisma.EndUser
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateEndUser

type AggregateEndUserObject =
  | AggregateEndUserFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateEndUserFields =
  | 'count'



  

export interface AggregateEndUserFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for NetworkConnection

type NetworkConnectionObject =
  | NetworkConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type NetworkConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface NetworkConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"NetworkConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'NetworkEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"NetworkConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.NetworkEdge[]> | prisma.NetworkEdge[]
  }
  aggregate: {
    type: 'AggregateNetwork'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"NetworkConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateNetwork> | prisma.AggregateNetwork
  }
}
  

// Types for NetworkEdge

type NetworkEdgeObject =
  | NetworkEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type NetworkEdgeFields =
  | 'node'
  | 'cursor'



  

export interface NetworkEdgeFieldDetails {
  node: {
    type: 'Network'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"NetworkEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Network> | prisma.Network
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateNetwork

type AggregateNetworkObject =
  | AggregateNetworkFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateNetworkFields =
  | 'count'



  

export interface AggregateNetworkFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createUser', args?: MutationCreateUserArgs[] | false, alias?: string  } 
  | { name: 'updateUser', args?: MutationUpdateUserArgs[] | false, alias?: string  } 
  | { name: 'updateManyUsers', args?: MutationUpdateManyUsersArgs[] | false, alias?: string  } 
  | { name: 'upsertUser', args?: MutationUpsertUserArgs[] | false, alias?: string  } 
  | { name: 'deleteUser', args?: MutationDeleteUserArgs[] | false, alias?: string  } 
  | { name: 'deleteManyUsers', args?: MutationDeleteManyUsersArgs[] | false, alias?: string  } 
  | { name: 'createAgent', args?: MutationCreateAgentArgs[] | false, alias?: string  } 
  | { name: 'updateAgent', args?: MutationUpdateAgentArgs[] | false, alias?: string  } 
  | { name: 'updateManyAgents', args?: MutationUpdateManyAgentsArgs[] | false, alias?: string  } 
  | { name: 'upsertAgent', args?: MutationUpsertAgentArgs[] | false, alias?: string  } 
  | { name: 'deleteAgent', args?: MutationDeleteAgentArgs[] | false, alias?: string  } 
  | { name: 'deleteManyAgents', args?: MutationDeleteManyAgentsArgs[] | false, alias?: string  } 
  | { name: 'createEndUser', args?: MutationCreateEndUserArgs[] | false, alias?: string  } 
  | { name: 'updateEndUser', args?: MutationUpdateEndUserArgs[] | false, alias?: string  } 
  | { name: 'updateManyEndUsers', args?: MutationUpdateManyEndUsersArgs[] | false, alias?: string  } 
  | { name: 'upsertEndUser', args?: MutationUpsertEndUserArgs[] | false, alias?: string  } 
  | { name: 'deleteEndUser', args?: MutationDeleteEndUserArgs[] | false, alias?: string  } 
  | { name: 'deleteManyEndUsers', args?: MutationDeleteManyEndUsersArgs[] | false, alias?: string  } 
  | { name: 'createNetwork', args?: MutationCreateNetworkArgs[] | false, alias?: string  } 
  | { name: 'updateNetwork', args?: MutationUpdateNetworkArgs[] | false, alias?: string  } 
  | { name: 'updateManyNetworks', args?: MutationUpdateManyNetworksArgs[] | false, alias?: string  } 
  | { name: 'upsertNetwork', args?: MutationUpsertNetworkArgs[] | false, alias?: string  } 
  | { name: 'deleteNetwork', args?: MutationDeleteNetworkArgs[] | false, alias?: string  } 
  | { name: 'deleteManyNetworks', args?: MutationDeleteManyNetworksArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createUser'
  | 'updateUser'
  | 'updateManyUsers'
  | 'upsertUser'
  | 'deleteUser'
  | 'deleteManyUsers'
  | 'createAgent'
  | 'updateAgent'
  | 'updateManyAgents'
  | 'upsertAgent'
  | 'deleteAgent'
  | 'deleteManyAgents'
  | 'createEndUser'
  | 'updateEndUser'
  | 'updateManyEndUsers'
  | 'upsertEndUser'
  | 'deleteEndUser'
  | 'deleteManyEndUsers'
  | 'createNetwork'
  | 'updateNetwork'
  | 'updateManyNetworks'
  | 'upsertNetwork'
  | 'deleteNetwork'
  | 'deleteManyNetworks'


type MutationCreateUserArgs =
  | 'data'
type MutationUpdateUserArgs =
  | 'data'
  | 'where'
type MutationUpdateManyUsersArgs =
  | 'data'
  | 'where'
type MutationUpsertUserArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteUserArgs =
  | 'where'
type MutationDeleteManyUsersArgs =
  | 'where'
type MutationCreateAgentArgs =
  | 'data'
type MutationUpdateAgentArgs =
  | 'data'
  | 'where'
type MutationUpdateManyAgentsArgs =
  | 'data'
  | 'where'
type MutationUpsertAgentArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteAgentArgs =
  | 'where'
type MutationDeleteManyAgentsArgs =
  | 'where'
type MutationCreateEndUserArgs =
  | 'data'
type MutationUpdateEndUserArgs =
  | 'data'
  | 'where'
type MutationUpdateManyEndUsersArgs =
  | 'data'
  | 'where'
type MutationUpsertEndUserArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteEndUserArgs =
  | 'where'
type MutationDeleteManyEndUsersArgs =
  | 'where'
type MutationCreateNetworkArgs =
  | 'data'
type MutationUpdateNetworkArgs =
  | 'data'
  | 'where'
type MutationUpdateManyNetworksArgs =
  | 'data'
  | 'where'
type MutationUpsertNetworkArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteNetworkArgs =
  | 'where'
type MutationDeleteManyNetworksArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createUser: {
    type: 'User'
    args: Record<MutationCreateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  updateUser: {
    type: 'User'
    args: Record<MutationUpdateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateInput, where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updateManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateManyMutationInput, where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertUser: {
    type: 'User'
    args: Record<MutationUpsertUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput, create: UserCreateInput, update: UserUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  deleteUser: {
    type: 'User'
    args: Record<MutationDeleteUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  deleteManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createAgent: {
    type: 'Agent'
    args: Record<MutationCreateAgentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: AgentCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Agent> | prisma.Agent
  }
  updateAgent: {
    type: 'Agent'
    args: Record<MutationUpdateAgentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: AgentUpdateInput, where: AgentWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Agent | null> | prisma.Agent | null
  }
  updateManyAgents: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyAgentsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: AgentUpdateManyMutationInput, where?: AgentWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertAgent: {
    type: 'Agent'
    args: Record<MutationUpsertAgentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: AgentWhereUniqueInput, create: AgentCreateInput, update: AgentUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Agent> | prisma.Agent
  }
  deleteAgent: {
    type: 'Agent'
    args: Record<MutationDeleteAgentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: AgentWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Agent | null> | prisma.Agent | null
  }
  deleteManyAgents: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyAgentsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: AgentWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createEndUser: {
    type: 'EndUser'
    args: Record<MutationCreateEndUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: EndUserCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EndUser> | prisma.EndUser
  }
  updateEndUser: {
    type: 'EndUser'
    args: Record<MutationUpdateEndUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: EndUserUpdateInput, where: EndUserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EndUser | null> | prisma.EndUser | null
  }
  updateManyEndUsers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyEndUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: EndUserUpdateManyMutationInput, where?: EndUserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertEndUser: {
    type: 'EndUser'
    args: Record<MutationUpsertEndUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: EndUserWhereUniqueInput, create: EndUserCreateInput, update: EndUserUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EndUser> | prisma.EndUser
  }
  deleteEndUser: {
    type: 'EndUser'
    args: Record<MutationDeleteEndUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: EndUserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EndUser | null> | prisma.EndUser | null
  }
  deleteManyEndUsers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyEndUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: EndUserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createNetwork: {
    type: 'Network'
    args: Record<MutationCreateNetworkArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: NetworkCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Network> | prisma.Network
  }
  updateNetwork: {
    type: 'Network'
    args: Record<MutationUpdateNetworkArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: NetworkUpdateInput, where: NetworkWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Network | null> | prisma.Network | null
  }
  updateManyNetworks: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyNetworksArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: NetworkUpdateManyMutationInput, where?: NetworkWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertNetwork: {
    type: 'Network'
    args: Record<MutationUpsertNetworkArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: NetworkWhereUniqueInput, create: NetworkCreateInput, update: NetworkUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Network> | prisma.Network
  }
  deleteNetwork: {
    type: 'Network'
    args: Record<MutationDeleteNetworkArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: NetworkWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Network | null> | prisma.Network | null
  }
  deleteManyNetworks: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyNetworksArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: NetworkWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'user', args?: SubscriptionUserArgs[] | false, alias?: string  } 
  | { name: 'agent', args?: SubscriptionAgentArgs[] | false, alias?: string  } 
  | { name: 'endUser', args?: SubscriptionEndUserArgs[] | false, alias?: string  } 
  | { name: 'network', args?: SubscriptionNetworkArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'user'
  | 'agent'
  | 'endUser'
  | 'network'


type SubscriptionUserArgs =
  | 'where'
type SubscriptionAgentArgs =
  | 'where'
type SubscriptionEndUserArgs =
  | 'where'
type SubscriptionNetworkArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  user: {
    type: 'UserSubscriptionPayload'
    args: Record<SubscriptionUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: UserSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserSubscriptionPayload | null> | prisma.UserSubscriptionPayload | null
  }
  agent: {
    type: 'AgentSubscriptionPayload'
    args: Record<SubscriptionAgentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: AgentSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AgentSubscriptionPayload | null> | prisma.AgentSubscriptionPayload | null
  }
  endUser: {
    type: 'EndUserSubscriptionPayload'
    args: Record<SubscriptionEndUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: EndUserSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EndUserSubscriptionPayload | null> | prisma.EndUserSubscriptionPayload | null
  }
  network: {
    type: 'NetworkSubscriptionPayload'
    args: Record<SubscriptionNetworkArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: NetworkSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.NetworkSubscriptionPayload | null> | prisma.NetworkSubscriptionPayload | null
  }
}
  

// Types for UserSubscriptionPayload

type UserSubscriptionPayloadObject =
  | UserSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type UserSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface UserSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'UserPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPreviousValues | null> | prisma.UserPreviousValues | null
  }
}
  

// Types for UserPreviousValues

type UserPreviousValuesObject =
  | UserPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'password', args?: [] | false, alias?: string  } 

type UserPreviousValuesFields =
  | 'id'
  | 'name'
  | 'email'
  | 'password'



  

export interface UserPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  password: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AgentSubscriptionPayload

type AgentSubscriptionPayloadObject =
  | AgentSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type AgentSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface AgentSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AgentSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Agent'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"AgentSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Agent | null> | prisma.Agent | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'AgentPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"AgentSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AgentPreviousValues | null> | prisma.AgentPreviousValues | null
  }
}
  

// Types for AgentPreviousValues

type AgentPreviousValuesObject =
  | AgentPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'nickname', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'tag', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type AgentPreviousValuesFields =
  | 'id'
  | 'createdAt'
  | 'nickname'
  | 'email'
  | 'tag'
  | 'updatedAt'



  

export interface AgentPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  nickname: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  tag: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for EndUserSubscriptionPayload

type EndUserSubscriptionPayloadObject =
  | EndUserSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type EndUserSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface EndUserSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EndUserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'EndUser'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"EndUserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EndUser | null> | prisma.EndUser | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'EndUserPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"EndUserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EndUserPreviousValues | null> | prisma.EndUserPreviousValues | null
  }
}
  

// Types for EndUserPreviousValues

type EndUserPreviousValuesObject =
  | EndUserPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'fullName', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type EndUserPreviousValuesFields =
  | 'id'
  | 'createdAt'
  | 'email'
  | 'fullName'
  | 'updatedAt'



  

export interface EndUserPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  fullName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for NetworkSubscriptionPayload

type NetworkSubscriptionPayloadObject =
  | NetworkSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type NetworkSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface NetworkSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"NetworkSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Network'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"NetworkSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Network | null> | prisma.Network | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'NetworkPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"NetworkSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.NetworkPreviousValues | null> | prisma.NetworkPreviousValues | null
  }
}
  

// Types for NetworkPreviousValues

type NetworkPreviousValuesObject =
  | NetworkPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 

type NetworkPreviousValuesFields =
  | 'id'
  | 'name'
  | 'description'



  

export interface NetworkPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  


export interface UserWhereUniqueInput {
  id?: string | null
  email?: string | null
}
export type UserWhereUniqueInputInputObject =
  | Extract<keyof UserWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  
export interface EndUserWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  agents_every?: AgentWhereInput | null
  agents_some?: AgentWhereInput | null
  agents_none?: AgentWhereInput | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  fullName?: string | null
  fullName_not?: string | null
  fullName_in?: string[]
  fullName_not_in?: string[]
  fullName_lt?: string | null
  fullName_lte?: string | null
  fullName_gt?: string | null
  fullName_gte?: string | null
  fullName_contains?: string | null
  fullName_not_contains?: string | null
  fullName_starts_with?: string | null
  fullName_not_starts_with?: string | null
  fullName_ends_with?: string | null
  fullName_not_ends_with?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  users_every?: UserWhereInput | null
  users_some?: UserWhereInput | null
  users_none?: UserWhereInput | null
  AND?: EndUserWhereInput[]
  OR?: EndUserWhereInput[]
  NOT?: EndUserWhereInput[]
}
export type EndUserWhereInputInputObject =
  | Extract<keyof EndUserWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'agents_every', alias?: string  } 
  | { name: 'agents_some', alias?: string  } 
  | { name: 'agents_none', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'fullName', alias?: string  } 
  | { name: 'fullName_not', alias?: string  } 
  | { name: 'fullName_in', alias?: string  } 
  | { name: 'fullName_not_in', alias?: string  } 
  | { name: 'fullName_lt', alias?: string  } 
  | { name: 'fullName_lte', alias?: string  } 
  | { name: 'fullName_gt', alias?: string  } 
  | { name: 'fullName_gte', alias?: string  } 
  | { name: 'fullName_contains', alias?: string  } 
  | { name: 'fullName_not_contains', alias?: string  } 
  | { name: 'fullName_starts_with', alias?: string  } 
  | { name: 'fullName_not_starts_with', alias?: string  } 
  | { name: 'fullName_ends_with', alias?: string  } 
  | { name: 'fullName_not_ends_with', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'users_every', alias?: string  } 
  | { name: 'users_some', alias?: string  } 
  | { name: 'users_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface AgentWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  endUser?: EndUserWhereInput | null
  nickname?: string | null
  nickname_not?: string | null
  nickname_in?: string[]
  nickname_not_in?: string[]
  nickname_lt?: string | null
  nickname_lte?: string | null
  nickname_gt?: string | null
  nickname_gte?: string | null
  nickname_contains?: string | null
  nickname_not_contains?: string | null
  nickname_starts_with?: string | null
  nickname_not_starts_with?: string | null
  nickname_ends_with?: string | null
  nickname_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  tag?: string | null
  tag_not?: string | null
  tag_in?: string[]
  tag_not_in?: string[]
  tag_lt?: string | null
  tag_lte?: string | null
  tag_gt?: string | null
  tag_gte?: string | null
  tag_contains?: string | null
  tag_not_contains?: string | null
  tag_starts_with?: string | null
  tag_not_starts_with?: string | null
  tag_ends_with?: string | null
  tag_not_ends_with?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  ownedNetworks_every?: NetworkWhereInput | null
  ownedNetworks_some?: NetworkWhereInput | null
  ownedNetworks_none?: NetworkWhereInput | null
  networks_every?: NetworkWhereInput | null
  networks_some?: NetworkWhereInput | null
  networks_none?: NetworkWhereInput | null
  AND?: AgentWhereInput[]
  OR?: AgentWhereInput[]
  NOT?: AgentWhereInput[]
}
export type AgentWhereInputInputObject =
  | Extract<keyof AgentWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'endUser', alias?: string  } 
  | { name: 'nickname', alias?: string  } 
  | { name: 'nickname_not', alias?: string  } 
  | { name: 'nickname_in', alias?: string  } 
  | { name: 'nickname_not_in', alias?: string  } 
  | { name: 'nickname_lt', alias?: string  } 
  | { name: 'nickname_lte', alias?: string  } 
  | { name: 'nickname_gt', alias?: string  } 
  | { name: 'nickname_gte', alias?: string  } 
  | { name: 'nickname_contains', alias?: string  } 
  | { name: 'nickname_not_contains', alias?: string  } 
  | { name: 'nickname_starts_with', alias?: string  } 
  | { name: 'nickname_not_starts_with', alias?: string  } 
  | { name: 'nickname_ends_with', alias?: string  } 
  | { name: 'nickname_not_ends_with', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'tag', alias?: string  } 
  | { name: 'tag_not', alias?: string  } 
  | { name: 'tag_in', alias?: string  } 
  | { name: 'tag_not_in', alias?: string  } 
  | { name: 'tag_lt', alias?: string  } 
  | { name: 'tag_lte', alias?: string  } 
  | { name: 'tag_gt', alias?: string  } 
  | { name: 'tag_gte', alias?: string  } 
  | { name: 'tag_contains', alias?: string  } 
  | { name: 'tag_not_contains', alias?: string  } 
  | { name: 'tag_starts_with', alias?: string  } 
  | { name: 'tag_not_starts_with', alias?: string  } 
  | { name: 'tag_ends_with', alias?: string  } 
  | { name: 'tag_not_ends_with', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'ownedNetworks_every', alias?: string  } 
  | { name: 'ownedNetworks_some', alias?: string  } 
  | { name: 'ownedNetworks_none', alias?: string  } 
  | { name: 'networks_every', alias?: string  } 
  | { name: 'networks_some', alias?: string  } 
  | { name: 'networks_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface NetworkWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  master?: AgentWhereInput | null
  slaves_every?: AgentWhereInput | null
  slaves_some?: AgentWhereInput | null
  slaves_none?: AgentWhereInput | null
  AND?: NetworkWhereInput[]
  OR?: NetworkWhereInput[]
  NOT?: NetworkWhereInput[]
}
export type NetworkWhereInputInputObject =
  | Extract<keyof NetworkWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'master', alias?: string  } 
  | { name: 'slaves_every', alias?: string  } 
  | { name: 'slaves_some', alias?: string  } 
  | { name: 'slaves_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  password?: string | null
  password_not?: string | null
  password_in?: string[]
  password_not_in?: string[]
  password_lt?: string | null
  password_lte?: string | null
  password_gt?: string | null
  password_gte?: string | null
  password_contains?: string | null
  password_not_contains?: string | null
  password_starts_with?: string | null
  password_not_starts_with?: string | null
  password_ends_with?: string | null
  password_not_ends_with?: string | null
  endUsers_every?: EndUserWhereInput | null
  endUsers_some?: EndUserWhereInput | null
  endUsers_none?: EndUserWhereInput | null
  AND?: UserWhereInput[]
  OR?: UserWhereInput[]
  NOT?: UserWhereInput[]
}
export type UserWhereInputInputObject =
  | Extract<keyof UserWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'password_not', alias?: string  } 
  | { name: 'password_in', alias?: string  } 
  | { name: 'password_not_in', alias?: string  } 
  | { name: 'password_lt', alias?: string  } 
  | { name: 'password_lte', alias?: string  } 
  | { name: 'password_gt', alias?: string  } 
  | { name: 'password_gte', alias?: string  } 
  | { name: 'password_contains', alias?: string  } 
  | { name: 'password_not_contains', alias?: string  } 
  | { name: 'password_starts_with', alias?: string  } 
  | { name: 'password_not_starts_with', alias?: string  } 
  | { name: 'password_ends_with', alias?: string  } 
  | { name: 'password_not_ends_with', alias?: string  } 
  | { name: 'endUsers_every', alias?: string  } 
  | { name: 'endUsers_some', alias?: string  } 
  | { name: 'endUsers_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface AgentWhereUniqueInput {
  id?: string | null
  email?: string | null
}
export type AgentWhereUniqueInputInputObject =
  | Extract<keyof AgentWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  
export interface EndUserWhereUniqueInput {
  id?: string | null
  email?: string | null
}
export type EndUserWhereUniqueInputInputObject =
  | Extract<keyof EndUserWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  
export interface NetworkWhereUniqueInput {
  id?: string | null
}
export type NetworkWhereUniqueInputInputObject =
  | Extract<keyof NetworkWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface UserCreateInput {
  name?: string | null
  email?: string
  password?: string
  endUsers?: EndUserCreateManyWithoutUsersInput | null
}
export type UserCreateInputInputObject =
  | Extract<keyof UserCreateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'endUsers', alias?: string  } 
  
export interface EndUserCreateManyWithoutUsersInput {
  create?: EndUserCreateWithoutUsersInput[]
  connect?: EndUserWhereUniqueInput[]
}
export type EndUserCreateManyWithoutUsersInputInputObject =
  | Extract<keyof EndUserCreateManyWithoutUsersInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface EndUserCreateWithoutUsersInput {
  agents?: AgentCreateManyWithoutEndUserInput | null
  email?: string
  fullName?: string | null
}
export type EndUserCreateWithoutUsersInputInputObject =
  | Extract<keyof EndUserCreateWithoutUsersInput, string>
  | { name: 'agents', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'fullName', alias?: string  } 
  
export interface AgentCreateManyWithoutEndUserInput {
  create?: AgentCreateWithoutEndUserInput[]
  connect?: AgentWhereUniqueInput[]
}
export type AgentCreateManyWithoutEndUserInputInputObject =
  | Extract<keyof AgentCreateManyWithoutEndUserInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface AgentCreateWithoutEndUserInput {
  nickname?: string
  email?: string
  tag?: string | null
  ownedNetworks?: NetworkCreateManyWithoutMasterInput | null
  networks?: NetworkCreateManyWithoutSlavesInput | null
}
export type AgentCreateWithoutEndUserInputInputObject =
  | Extract<keyof AgentCreateWithoutEndUserInput, string>
  | { name: 'nickname', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'tag', alias?: string  } 
  | { name: 'ownedNetworks', alias?: string  } 
  | { name: 'networks', alias?: string  } 
  
export interface NetworkCreateManyWithoutMasterInput {
  create?: NetworkCreateWithoutMasterInput[]
  connect?: NetworkWhereUniqueInput[]
}
export type NetworkCreateManyWithoutMasterInputInputObject =
  | Extract<keyof NetworkCreateManyWithoutMasterInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface NetworkCreateWithoutMasterInput {
  name?: string
  description?: string | null
  slaves?: AgentCreateManyWithoutNetworksInput | null
}
export type NetworkCreateWithoutMasterInputInputObject =
  | Extract<keyof NetworkCreateWithoutMasterInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'slaves', alias?: string  } 
  
export interface AgentCreateManyWithoutNetworksInput {
  create?: AgentCreateWithoutNetworksInput[]
  connect?: AgentWhereUniqueInput[]
}
export type AgentCreateManyWithoutNetworksInputInputObject =
  | Extract<keyof AgentCreateManyWithoutNetworksInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface AgentCreateWithoutNetworksInput {
  endUser?: EndUserCreateOneWithoutAgentsInput | null
  nickname?: string
  email?: string
  tag?: string | null
  ownedNetworks?: NetworkCreateManyWithoutMasterInput | null
}
export type AgentCreateWithoutNetworksInputInputObject =
  | Extract<keyof AgentCreateWithoutNetworksInput, string>
  | { name: 'endUser', alias?: string  } 
  | { name: 'nickname', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'tag', alias?: string  } 
  | { name: 'ownedNetworks', alias?: string  } 
  
export interface EndUserCreateOneWithoutAgentsInput {
  create?: EndUserCreateWithoutAgentsInput | null
  connect?: EndUserWhereUniqueInput | null
}
export type EndUserCreateOneWithoutAgentsInputInputObject =
  | Extract<keyof EndUserCreateOneWithoutAgentsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface EndUserCreateWithoutAgentsInput {
  email?: string
  fullName?: string | null
  users?: UserCreateManyWithoutEndUsersInput | null
}
export type EndUserCreateWithoutAgentsInputInputObject =
  | Extract<keyof EndUserCreateWithoutAgentsInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'fullName', alias?: string  } 
  | { name: 'users', alias?: string  } 
  
export interface UserCreateManyWithoutEndUsersInput {
  create?: UserCreateWithoutEndUsersInput[]
  connect?: UserWhereUniqueInput[]
}
export type UserCreateManyWithoutEndUsersInputInputObject =
  | Extract<keyof UserCreateManyWithoutEndUsersInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutEndUsersInput {
  name?: string | null
  email?: string
  password?: string
}
export type UserCreateWithoutEndUsersInputInputObject =
  | Extract<keyof UserCreateWithoutEndUsersInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  
export interface NetworkCreateManyWithoutSlavesInput {
  create?: NetworkCreateWithoutSlavesInput[]
  connect?: NetworkWhereUniqueInput[]
}
export type NetworkCreateManyWithoutSlavesInputInputObject =
  | Extract<keyof NetworkCreateManyWithoutSlavesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface NetworkCreateWithoutSlavesInput {
  name?: string
  description?: string | null
  master?: AgentCreateOneWithoutOwnedNetworksInput
}
export type NetworkCreateWithoutSlavesInputInputObject =
  | Extract<keyof NetworkCreateWithoutSlavesInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'master', alias?: string  } 
  
export interface AgentCreateOneWithoutOwnedNetworksInput {
  create?: AgentCreateWithoutOwnedNetworksInput | null
  connect?: AgentWhereUniqueInput | null
}
export type AgentCreateOneWithoutOwnedNetworksInputInputObject =
  | Extract<keyof AgentCreateOneWithoutOwnedNetworksInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface AgentCreateWithoutOwnedNetworksInput {
  endUser?: EndUserCreateOneWithoutAgentsInput | null
  nickname?: string
  email?: string
  tag?: string | null
  networks?: NetworkCreateManyWithoutSlavesInput | null
}
export type AgentCreateWithoutOwnedNetworksInputInputObject =
  | Extract<keyof AgentCreateWithoutOwnedNetworksInput, string>
  | { name: 'endUser', alias?: string  } 
  | { name: 'nickname', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'tag', alias?: string  } 
  | { name: 'networks', alias?: string  } 
  
export interface UserUpdateInput {
  name?: string | null
  email?: string | null
  password?: string | null
  endUsers?: EndUserUpdateManyWithoutUsersInput | null
}
export type UserUpdateInputInputObject =
  | Extract<keyof UserUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'endUsers', alias?: string  } 
  
export interface EndUserUpdateManyWithoutUsersInput {
  create?: EndUserCreateWithoutUsersInput[]
  delete?: EndUserWhereUniqueInput[]
  connect?: EndUserWhereUniqueInput[]
  set?: EndUserWhereUniqueInput[]
  disconnect?: EndUserWhereUniqueInput[]
  update?: EndUserUpdateWithWhereUniqueWithoutUsersInput[]
  upsert?: EndUserUpsertWithWhereUniqueWithoutUsersInput[]
  deleteMany?: EndUserScalarWhereInput[]
  updateMany?: EndUserUpdateManyWithWhereNestedInput[]
}
export type EndUserUpdateManyWithoutUsersInputInputObject =
  | Extract<keyof EndUserUpdateManyWithoutUsersInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface EndUserUpdateWithWhereUniqueWithoutUsersInput {
  where?: EndUserWhereUniqueInput
  data?: EndUserUpdateWithoutUsersDataInput
}
export type EndUserUpdateWithWhereUniqueWithoutUsersInputInputObject =
  | Extract<keyof EndUserUpdateWithWhereUniqueWithoutUsersInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface EndUserUpdateWithoutUsersDataInput {
  agents?: AgentUpdateManyWithoutEndUserInput | null
  email?: string | null
  fullName?: string | null
}
export type EndUserUpdateWithoutUsersDataInputInputObject =
  | Extract<keyof EndUserUpdateWithoutUsersDataInput, string>
  | { name: 'agents', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'fullName', alias?: string  } 
  
export interface AgentUpdateManyWithoutEndUserInput {
  create?: AgentCreateWithoutEndUserInput[]
  delete?: AgentWhereUniqueInput[]
  connect?: AgentWhereUniqueInput[]
  set?: AgentWhereUniqueInput[]
  disconnect?: AgentWhereUniqueInput[]
  update?: AgentUpdateWithWhereUniqueWithoutEndUserInput[]
  upsert?: AgentUpsertWithWhereUniqueWithoutEndUserInput[]
  deleteMany?: AgentScalarWhereInput[]
  updateMany?: AgentUpdateManyWithWhereNestedInput[]
}
export type AgentUpdateManyWithoutEndUserInputInputObject =
  | Extract<keyof AgentUpdateManyWithoutEndUserInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface AgentUpdateWithWhereUniqueWithoutEndUserInput {
  where?: AgentWhereUniqueInput
  data?: AgentUpdateWithoutEndUserDataInput
}
export type AgentUpdateWithWhereUniqueWithoutEndUserInputInputObject =
  | Extract<keyof AgentUpdateWithWhereUniqueWithoutEndUserInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface AgentUpdateWithoutEndUserDataInput {
  nickname?: string | null
  email?: string | null
  tag?: string | null
  ownedNetworks?: NetworkUpdateManyWithoutMasterInput | null
  networks?: NetworkUpdateManyWithoutSlavesInput | null
}
export type AgentUpdateWithoutEndUserDataInputInputObject =
  | Extract<keyof AgentUpdateWithoutEndUserDataInput, string>
  | { name: 'nickname', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'tag', alias?: string  } 
  | { name: 'ownedNetworks', alias?: string  } 
  | { name: 'networks', alias?: string  } 
  
export interface NetworkUpdateManyWithoutMasterInput {
  create?: NetworkCreateWithoutMasterInput[]
  delete?: NetworkWhereUniqueInput[]
  connect?: NetworkWhereUniqueInput[]
  set?: NetworkWhereUniqueInput[]
  disconnect?: NetworkWhereUniqueInput[]
  update?: NetworkUpdateWithWhereUniqueWithoutMasterInput[]
  upsert?: NetworkUpsertWithWhereUniqueWithoutMasterInput[]
  deleteMany?: NetworkScalarWhereInput[]
  updateMany?: NetworkUpdateManyWithWhereNestedInput[]
}
export type NetworkUpdateManyWithoutMasterInputInputObject =
  | Extract<keyof NetworkUpdateManyWithoutMasterInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface NetworkUpdateWithWhereUniqueWithoutMasterInput {
  where?: NetworkWhereUniqueInput
  data?: NetworkUpdateWithoutMasterDataInput
}
export type NetworkUpdateWithWhereUniqueWithoutMasterInputInputObject =
  | Extract<keyof NetworkUpdateWithWhereUniqueWithoutMasterInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface NetworkUpdateWithoutMasterDataInput {
  name?: string | null
  description?: string | null
  slaves?: AgentUpdateManyWithoutNetworksInput | null
}
export type NetworkUpdateWithoutMasterDataInputInputObject =
  | Extract<keyof NetworkUpdateWithoutMasterDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'slaves', alias?: string  } 
  
export interface AgentUpdateManyWithoutNetworksInput {
  create?: AgentCreateWithoutNetworksInput[]
  delete?: AgentWhereUniqueInput[]
  connect?: AgentWhereUniqueInput[]
  set?: AgentWhereUniqueInput[]
  disconnect?: AgentWhereUniqueInput[]
  update?: AgentUpdateWithWhereUniqueWithoutNetworksInput[]
  upsert?: AgentUpsertWithWhereUniqueWithoutNetworksInput[]
  deleteMany?: AgentScalarWhereInput[]
  updateMany?: AgentUpdateManyWithWhereNestedInput[]
}
export type AgentUpdateManyWithoutNetworksInputInputObject =
  | Extract<keyof AgentUpdateManyWithoutNetworksInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface AgentUpdateWithWhereUniqueWithoutNetworksInput {
  where?: AgentWhereUniqueInput
  data?: AgentUpdateWithoutNetworksDataInput
}
export type AgentUpdateWithWhereUniqueWithoutNetworksInputInputObject =
  | Extract<keyof AgentUpdateWithWhereUniqueWithoutNetworksInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface AgentUpdateWithoutNetworksDataInput {
  endUser?: EndUserUpdateOneWithoutAgentsInput | null
  nickname?: string | null
  email?: string | null
  tag?: string | null
  ownedNetworks?: NetworkUpdateManyWithoutMasterInput | null
}
export type AgentUpdateWithoutNetworksDataInputInputObject =
  | Extract<keyof AgentUpdateWithoutNetworksDataInput, string>
  | { name: 'endUser', alias?: string  } 
  | { name: 'nickname', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'tag', alias?: string  } 
  | { name: 'ownedNetworks', alias?: string  } 
  
export interface EndUserUpdateOneWithoutAgentsInput {
  create?: EndUserCreateWithoutAgentsInput | null
  update?: EndUserUpdateWithoutAgentsDataInput | null
  upsert?: EndUserUpsertWithoutAgentsInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: EndUserWhereUniqueInput | null
}
export type EndUserUpdateOneWithoutAgentsInputInputObject =
  | Extract<keyof EndUserUpdateOneWithoutAgentsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface EndUserUpdateWithoutAgentsDataInput {
  email?: string | null
  fullName?: string | null
  users?: UserUpdateManyWithoutEndUsersInput | null
}
export type EndUserUpdateWithoutAgentsDataInputInputObject =
  | Extract<keyof EndUserUpdateWithoutAgentsDataInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'fullName', alias?: string  } 
  | { name: 'users', alias?: string  } 
  
export interface UserUpdateManyWithoutEndUsersInput {
  create?: UserCreateWithoutEndUsersInput[]
  delete?: UserWhereUniqueInput[]
  connect?: UserWhereUniqueInput[]
  set?: UserWhereUniqueInput[]
  disconnect?: UserWhereUniqueInput[]
  update?: UserUpdateWithWhereUniqueWithoutEndUsersInput[]
  upsert?: UserUpsertWithWhereUniqueWithoutEndUsersInput[]
  deleteMany?: UserScalarWhereInput[]
  updateMany?: UserUpdateManyWithWhereNestedInput[]
}
export type UserUpdateManyWithoutEndUsersInputInputObject =
  | Extract<keyof UserUpdateManyWithoutEndUsersInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface UserUpdateWithWhereUniqueWithoutEndUsersInput {
  where?: UserWhereUniqueInput
  data?: UserUpdateWithoutEndUsersDataInput
}
export type UserUpdateWithWhereUniqueWithoutEndUsersInputInputObject =
  | Extract<keyof UserUpdateWithWhereUniqueWithoutEndUsersInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface UserUpdateWithoutEndUsersDataInput {
  name?: string | null
  email?: string | null
  password?: string | null
}
export type UserUpdateWithoutEndUsersDataInputInputObject =
  | Extract<keyof UserUpdateWithoutEndUsersDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  
export interface UserUpsertWithWhereUniqueWithoutEndUsersInput {
  where?: UserWhereUniqueInput
  update?: UserUpdateWithoutEndUsersDataInput
  create?: UserCreateWithoutEndUsersInput
}
export type UserUpsertWithWhereUniqueWithoutEndUsersInputInputObject =
  | Extract<keyof UserUpsertWithWhereUniqueWithoutEndUsersInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface UserScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  password?: string | null
  password_not?: string | null
  password_in?: string[]
  password_not_in?: string[]
  password_lt?: string | null
  password_lte?: string | null
  password_gt?: string | null
  password_gte?: string | null
  password_contains?: string | null
  password_not_contains?: string | null
  password_starts_with?: string | null
  password_not_starts_with?: string | null
  password_ends_with?: string | null
  password_not_ends_with?: string | null
  AND?: UserScalarWhereInput[]
  OR?: UserScalarWhereInput[]
  NOT?: UserScalarWhereInput[]
}
export type UserScalarWhereInputInputObject =
  | Extract<keyof UserScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'password_not', alias?: string  } 
  | { name: 'password_in', alias?: string  } 
  | { name: 'password_not_in', alias?: string  } 
  | { name: 'password_lt', alias?: string  } 
  | { name: 'password_lte', alias?: string  } 
  | { name: 'password_gt', alias?: string  } 
  | { name: 'password_gte', alias?: string  } 
  | { name: 'password_contains', alias?: string  } 
  | { name: 'password_not_contains', alias?: string  } 
  | { name: 'password_starts_with', alias?: string  } 
  | { name: 'password_not_starts_with', alias?: string  } 
  | { name: 'password_ends_with', alias?: string  } 
  | { name: 'password_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserUpdateManyWithWhereNestedInput {
  where?: UserScalarWhereInput
  data?: UserUpdateManyDataInput
}
export type UserUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof UserUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface UserUpdateManyDataInput {
  name?: string | null
  email?: string | null
  password?: string | null
}
export type UserUpdateManyDataInputInputObject =
  | Extract<keyof UserUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  
export interface EndUserUpsertWithoutAgentsInput {
  update?: EndUserUpdateWithoutAgentsDataInput
  create?: EndUserCreateWithoutAgentsInput
}
export type EndUserUpsertWithoutAgentsInputInputObject =
  | Extract<keyof EndUserUpsertWithoutAgentsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface AgentUpsertWithWhereUniqueWithoutNetworksInput {
  where?: AgentWhereUniqueInput
  update?: AgentUpdateWithoutNetworksDataInput
  create?: AgentCreateWithoutNetworksInput
}
export type AgentUpsertWithWhereUniqueWithoutNetworksInputInputObject =
  | Extract<keyof AgentUpsertWithWhereUniqueWithoutNetworksInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface AgentScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  nickname?: string | null
  nickname_not?: string | null
  nickname_in?: string[]
  nickname_not_in?: string[]
  nickname_lt?: string | null
  nickname_lte?: string | null
  nickname_gt?: string | null
  nickname_gte?: string | null
  nickname_contains?: string | null
  nickname_not_contains?: string | null
  nickname_starts_with?: string | null
  nickname_not_starts_with?: string | null
  nickname_ends_with?: string | null
  nickname_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  tag?: string | null
  tag_not?: string | null
  tag_in?: string[]
  tag_not_in?: string[]
  tag_lt?: string | null
  tag_lte?: string | null
  tag_gt?: string | null
  tag_gte?: string | null
  tag_contains?: string | null
  tag_not_contains?: string | null
  tag_starts_with?: string | null
  tag_not_starts_with?: string | null
  tag_ends_with?: string | null
  tag_not_ends_with?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: AgentScalarWhereInput[]
  OR?: AgentScalarWhereInput[]
  NOT?: AgentScalarWhereInput[]
}
export type AgentScalarWhereInputInputObject =
  | Extract<keyof AgentScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'nickname', alias?: string  } 
  | { name: 'nickname_not', alias?: string  } 
  | { name: 'nickname_in', alias?: string  } 
  | { name: 'nickname_not_in', alias?: string  } 
  | { name: 'nickname_lt', alias?: string  } 
  | { name: 'nickname_lte', alias?: string  } 
  | { name: 'nickname_gt', alias?: string  } 
  | { name: 'nickname_gte', alias?: string  } 
  | { name: 'nickname_contains', alias?: string  } 
  | { name: 'nickname_not_contains', alias?: string  } 
  | { name: 'nickname_starts_with', alias?: string  } 
  | { name: 'nickname_not_starts_with', alias?: string  } 
  | { name: 'nickname_ends_with', alias?: string  } 
  | { name: 'nickname_not_ends_with', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'tag', alias?: string  } 
  | { name: 'tag_not', alias?: string  } 
  | { name: 'tag_in', alias?: string  } 
  | { name: 'tag_not_in', alias?: string  } 
  | { name: 'tag_lt', alias?: string  } 
  | { name: 'tag_lte', alias?: string  } 
  | { name: 'tag_gt', alias?: string  } 
  | { name: 'tag_gte', alias?: string  } 
  | { name: 'tag_contains', alias?: string  } 
  | { name: 'tag_not_contains', alias?: string  } 
  | { name: 'tag_starts_with', alias?: string  } 
  | { name: 'tag_not_starts_with', alias?: string  } 
  | { name: 'tag_ends_with', alias?: string  } 
  | { name: 'tag_not_ends_with', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface AgentUpdateManyWithWhereNestedInput {
  where?: AgentScalarWhereInput
  data?: AgentUpdateManyDataInput
}
export type AgentUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof AgentUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface AgentUpdateManyDataInput {
  nickname?: string | null
  email?: string | null
  tag?: string | null
}
export type AgentUpdateManyDataInputInputObject =
  | Extract<keyof AgentUpdateManyDataInput, string>
  | { name: 'nickname', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'tag', alias?: string  } 
  
export interface NetworkUpsertWithWhereUniqueWithoutMasterInput {
  where?: NetworkWhereUniqueInput
  update?: NetworkUpdateWithoutMasterDataInput
  create?: NetworkCreateWithoutMasterInput
}
export type NetworkUpsertWithWhereUniqueWithoutMasterInputInputObject =
  | Extract<keyof NetworkUpsertWithWhereUniqueWithoutMasterInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface NetworkScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  AND?: NetworkScalarWhereInput[]
  OR?: NetworkScalarWhereInput[]
  NOT?: NetworkScalarWhereInput[]
}
export type NetworkScalarWhereInputInputObject =
  | Extract<keyof NetworkScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface NetworkUpdateManyWithWhereNestedInput {
  where?: NetworkScalarWhereInput
  data?: NetworkUpdateManyDataInput
}
export type NetworkUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof NetworkUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface NetworkUpdateManyDataInput {
  name?: string | null
  description?: string | null
}
export type NetworkUpdateManyDataInputInputObject =
  | Extract<keyof NetworkUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  
export interface NetworkUpdateManyWithoutSlavesInput {
  create?: NetworkCreateWithoutSlavesInput[]
  delete?: NetworkWhereUniqueInput[]
  connect?: NetworkWhereUniqueInput[]
  set?: NetworkWhereUniqueInput[]
  disconnect?: NetworkWhereUniqueInput[]
  update?: NetworkUpdateWithWhereUniqueWithoutSlavesInput[]
  upsert?: NetworkUpsertWithWhereUniqueWithoutSlavesInput[]
  deleteMany?: NetworkScalarWhereInput[]
  updateMany?: NetworkUpdateManyWithWhereNestedInput[]
}
export type NetworkUpdateManyWithoutSlavesInputInputObject =
  | Extract<keyof NetworkUpdateManyWithoutSlavesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface NetworkUpdateWithWhereUniqueWithoutSlavesInput {
  where?: NetworkWhereUniqueInput
  data?: NetworkUpdateWithoutSlavesDataInput
}
export type NetworkUpdateWithWhereUniqueWithoutSlavesInputInputObject =
  | Extract<keyof NetworkUpdateWithWhereUniqueWithoutSlavesInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface NetworkUpdateWithoutSlavesDataInput {
  name?: string | null
  description?: string | null
  master?: AgentUpdateOneRequiredWithoutOwnedNetworksInput | null
}
export type NetworkUpdateWithoutSlavesDataInputInputObject =
  | Extract<keyof NetworkUpdateWithoutSlavesDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'master', alias?: string  } 
  
export interface AgentUpdateOneRequiredWithoutOwnedNetworksInput {
  create?: AgentCreateWithoutOwnedNetworksInput | null
  update?: AgentUpdateWithoutOwnedNetworksDataInput | null
  upsert?: AgentUpsertWithoutOwnedNetworksInput | null
  connect?: AgentWhereUniqueInput | null
}
export type AgentUpdateOneRequiredWithoutOwnedNetworksInputInputObject =
  | Extract<keyof AgentUpdateOneRequiredWithoutOwnedNetworksInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface AgentUpdateWithoutOwnedNetworksDataInput {
  endUser?: EndUserUpdateOneWithoutAgentsInput | null
  nickname?: string | null
  email?: string | null
  tag?: string | null
  networks?: NetworkUpdateManyWithoutSlavesInput | null
}
export type AgentUpdateWithoutOwnedNetworksDataInputInputObject =
  | Extract<keyof AgentUpdateWithoutOwnedNetworksDataInput, string>
  | { name: 'endUser', alias?: string  } 
  | { name: 'nickname', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'tag', alias?: string  } 
  | { name: 'networks', alias?: string  } 
  
export interface AgentUpsertWithoutOwnedNetworksInput {
  update?: AgentUpdateWithoutOwnedNetworksDataInput
  create?: AgentCreateWithoutOwnedNetworksInput
}
export type AgentUpsertWithoutOwnedNetworksInputInputObject =
  | Extract<keyof AgentUpsertWithoutOwnedNetworksInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface NetworkUpsertWithWhereUniqueWithoutSlavesInput {
  where?: NetworkWhereUniqueInput
  update?: NetworkUpdateWithoutSlavesDataInput
  create?: NetworkCreateWithoutSlavesInput
}
export type NetworkUpsertWithWhereUniqueWithoutSlavesInputInputObject =
  | Extract<keyof NetworkUpsertWithWhereUniqueWithoutSlavesInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface AgentUpsertWithWhereUniqueWithoutEndUserInput {
  where?: AgentWhereUniqueInput
  update?: AgentUpdateWithoutEndUserDataInput
  create?: AgentCreateWithoutEndUserInput
}
export type AgentUpsertWithWhereUniqueWithoutEndUserInputInputObject =
  | Extract<keyof AgentUpsertWithWhereUniqueWithoutEndUserInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface EndUserUpsertWithWhereUniqueWithoutUsersInput {
  where?: EndUserWhereUniqueInput
  update?: EndUserUpdateWithoutUsersDataInput
  create?: EndUserCreateWithoutUsersInput
}
export type EndUserUpsertWithWhereUniqueWithoutUsersInputInputObject =
  | Extract<keyof EndUserUpsertWithWhereUniqueWithoutUsersInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface EndUserScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  fullName?: string | null
  fullName_not?: string | null
  fullName_in?: string[]
  fullName_not_in?: string[]
  fullName_lt?: string | null
  fullName_lte?: string | null
  fullName_gt?: string | null
  fullName_gte?: string | null
  fullName_contains?: string | null
  fullName_not_contains?: string | null
  fullName_starts_with?: string | null
  fullName_not_starts_with?: string | null
  fullName_ends_with?: string | null
  fullName_not_ends_with?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: EndUserScalarWhereInput[]
  OR?: EndUserScalarWhereInput[]
  NOT?: EndUserScalarWhereInput[]
}
export type EndUserScalarWhereInputInputObject =
  | Extract<keyof EndUserScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'fullName', alias?: string  } 
  | { name: 'fullName_not', alias?: string  } 
  | { name: 'fullName_in', alias?: string  } 
  | { name: 'fullName_not_in', alias?: string  } 
  | { name: 'fullName_lt', alias?: string  } 
  | { name: 'fullName_lte', alias?: string  } 
  | { name: 'fullName_gt', alias?: string  } 
  | { name: 'fullName_gte', alias?: string  } 
  | { name: 'fullName_contains', alias?: string  } 
  | { name: 'fullName_not_contains', alias?: string  } 
  | { name: 'fullName_starts_with', alias?: string  } 
  | { name: 'fullName_not_starts_with', alias?: string  } 
  | { name: 'fullName_ends_with', alias?: string  } 
  | { name: 'fullName_not_ends_with', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface EndUserUpdateManyWithWhereNestedInput {
  where?: EndUserScalarWhereInput
  data?: EndUserUpdateManyDataInput
}
export type EndUserUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof EndUserUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface EndUserUpdateManyDataInput {
  email?: string | null
  fullName?: string | null
}
export type EndUserUpdateManyDataInputInputObject =
  | Extract<keyof EndUserUpdateManyDataInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'fullName', alias?: string  } 
  
export interface UserUpdateManyMutationInput {
  name?: string | null
  email?: string | null
  password?: string | null
}
export type UserUpdateManyMutationInputInputObject =
  | Extract<keyof UserUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  
export interface AgentCreateInput {
  endUser?: EndUserCreateOneWithoutAgentsInput | null
  nickname?: string
  email?: string
  tag?: string | null
  ownedNetworks?: NetworkCreateManyWithoutMasterInput | null
  networks?: NetworkCreateManyWithoutSlavesInput | null
}
export type AgentCreateInputInputObject =
  | Extract<keyof AgentCreateInput, string>
  | { name: 'endUser', alias?: string  } 
  | { name: 'nickname', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'tag', alias?: string  } 
  | { name: 'ownedNetworks', alias?: string  } 
  | { name: 'networks', alias?: string  } 
  
export interface AgentUpdateInput {
  endUser?: EndUserUpdateOneWithoutAgentsInput | null
  nickname?: string | null
  email?: string | null
  tag?: string | null
  ownedNetworks?: NetworkUpdateManyWithoutMasterInput | null
  networks?: NetworkUpdateManyWithoutSlavesInput | null
}
export type AgentUpdateInputInputObject =
  | Extract<keyof AgentUpdateInput, string>
  | { name: 'endUser', alias?: string  } 
  | { name: 'nickname', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'tag', alias?: string  } 
  | { name: 'ownedNetworks', alias?: string  } 
  | { name: 'networks', alias?: string  } 
  
export interface AgentUpdateManyMutationInput {
  nickname?: string | null
  email?: string | null
  tag?: string | null
}
export type AgentUpdateManyMutationInputInputObject =
  | Extract<keyof AgentUpdateManyMutationInput, string>
  | { name: 'nickname', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'tag', alias?: string  } 
  
export interface EndUserCreateInput {
  agents?: AgentCreateManyWithoutEndUserInput | null
  email?: string
  fullName?: string | null
  users?: UserCreateManyWithoutEndUsersInput | null
}
export type EndUserCreateInputInputObject =
  | Extract<keyof EndUserCreateInput, string>
  | { name: 'agents', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'fullName', alias?: string  } 
  | { name: 'users', alias?: string  } 
  
export interface EndUserUpdateInput {
  agents?: AgentUpdateManyWithoutEndUserInput | null
  email?: string | null
  fullName?: string | null
  users?: UserUpdateManyWithoutEndUsersInput | null
}
export type EndUserUpdateInputInputObject =
  | Extract<keyof EndUserUpdateInput, string>
  | { name: 'agents', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'fullName', alias?: string  } 
  | { name: 'users', alias?: string  } 
  
export interface EndUserUpdateManyMutationInput {
  email?: string | null
  fullName?: string | null
}
export type EndUserUpdateManyMutationInputInputObject =
  | Extract<keyof EndUserUpdateManyMutationInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'fullName', alias?: string  } 
  
export interface NetworkCreateInput {
  name?: string
  description?: string | null
  master?: AgentCreateOneWithoutOwnedNetworksInput
  slaves?: AgentCreateManyWithoutNetworksInput | null
}
export type NetworkCreateInputInputObject =
  | Extract<keyof NetworkCreateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'master', alias?: string  } 
  | { name: 'slaves', alias?: string  } 
  
export interface NetworkUpdateInput {
  name?: string | null
  description?: string | null
  master?: AgentUpdateOneRequiredWithoutOwnedNetworksInput | null
  slaves?: AgentUpdateManyWithoutNetworksInput | null
}
export type NetworkUpdateInputInputObject =
  | Extract<keyof NetworkUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'master', alias?: string  } 
  | { name: 'slaves', alias?: string  } 
  
export interface NetworkUpdateManyMutationInput {
  name?: string | null
  description?: string | null
}
export type NetworkUpdateManyMutationInputInputObject =
  | Extract<keyof NetworkUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  
export interface UserSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: UserWhereInput | null
  AND?: UserSubscriptionWhereInput[]
  OR?: UserSubscriptionWhereInput[]
  NOT?: UserSubscriptionWhereInput[]
}
export type UserSubscriptionWhereInputInputObject =
  | Extract<keyof UserSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface AgentSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: AgentWhereInput | null
  AND?: AgentSubscriptionWhereInput[]
  OR?: AgentSubscriptionWhereInput[]
  NOT?: AgentSubscriptionWhereInput[]
}
export type AgentSubscriptionWhereInputInputObject =
  | Extract<keyof AgentSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface EndUserSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: EndUserWhereInput | null
  AND?: EndUserSubscriptionWhereInput[]
  OR?: EndUserSubscriptionWhereInput[]
  NOT?: EndUserSubscriptionWhereInput[]
}
export type EndUserSubscriptionWhereInputInputObject =
  | Extract<keyof EndUserSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface NetworkSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: NetworkWhereInput | null
  AND?: NetworkSubscriptionWhereInput[]
  OR?: NetworkSubscriptionWhereInput[]
  NOT?: NetworkSubscriptionWhereInput[]
}
export type NetworkSubscriptionWhereInputInputObject =
  | Extract<keyof NetworkSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type EndUserOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'email_ASC'
  | 'email_DESC'
  | 'fullName_ASC'
  | 'fullName_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type AgentOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'nickname_ASC'
  | 'nickname_DESC'
  | 'email_ASC'
  | 'email_DESC'
  | 'tag_ASC'
  | 'tag_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type NetworkOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'description_ASC'
  | 'description_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type UserOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'email_ASC'
  | 'email_DESC'
  | 'password_ASC'
  | 'password_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  