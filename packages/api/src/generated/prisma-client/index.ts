// Code generated by Prisma (prisma@1.34.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  agent: (where?: AgentWhereInput) => Promise<boolean>;
  endUser: (where?: EndUserWhereInput) => Promise<boolean>;
  network: (where?: NetworkWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  agent: (where: AgentWhereUniqueInput) => AgentNullablePromise;
  agents: (args?: {
    where?: AgentWhereInput;
    orderBy?: AgentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Agent>;
  agentsConnection: (args?: {
    where?: AgentWhereInput;
    orderBy?: AgentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AgentConnectionPromise;
  endUser: (where: EndUserWhereUniqueInput) => EndUserNullablePromise;
  endUsers: (args?: {
    where?: EndUserWhereInput;
    orderBy?: EndUserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<EndUser>;
  endUsersConnection: (args?: {
    where?: EndUserWhereInput;
    orderBy?: EndUserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => EndUserConnectionPromise;
  network: (where: NetworkWhereUniqueInput) => NetworkNullablePromise;
  networks: (args?: {
    where?: NetworkWhereInput;
    orderBy?: NetworkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Network>;
  networksConnection: (args?: {
    where?: NetworkWhereInput;
    orderBy?: NetworkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => NetworkConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAgent: (data: AgentCreateInput) => AgentPromise;
  updateAgent: (args: {
    data: AgentUpdateInput;
    where: AgentWhereUniqueInput;
  }) => AgentPromise;
  updateManyAgents: (args: {
    data: AgentUpdateManyMutationInput;
    where?: AgentWhereInput;
  }) => BatchPayloadPromise;
  upsertAgent: (args: {
    where: AgentWhereUniqueInput;
    create: AgentCreateInput;
    update: AgentUpdateInput;
  }) => AgentPromise;
  deleteAgent: (where: AgentWhereUniqueInput) => AgentPromise;
  deleteManyAgents: (where?: AgentWhereInput) => BatchPayloadPromise;
  createEndUser: (data: EndUserCreateInput) => EndUserPromise;
  updateEndUser: (args: {
    data: EndUserUpdateInput;
    where: EndUserWhereUniqueInput;
  }) => EndUserPromise;
  updateManyEndUsers: (args: {
    data: EndUserUpdateManyMutationInput;
    where?: EndUserWhereInput;
  }) => BatchPayloadPromise;
  upsertEndUser: (args: {
    where: EndUserWhereUniqueInput;
    create: EndUserCreateInput;
    update: EndUserUpdateInput;
  }) => EndUserPromise;
  deleteEndUser: (where: EndUserWhereUniqueInput) => EndUserPromise;
  deleteManyEndUsers: (where?: EndUserWhereInput) => BatchPayloadPromise;
  createNetwork: (data: NetworkCreateInput) => NetworkPromise;
  updateNetwork: (args: {
    data: NetworkUpdateInput;
    where: NetworkWhereUniqueInput;
  }) => NetworkPromise;
  updateManyNetworks: (args: {
    data: NetworkUpdateManyMutationInput;
    where?: NetworkWhereInput;
  }) => BatchPayloadPromise;
  upsertNetwork: (args: {
    where: NetworkWhereUniqueInput;
    create: NetworkCreateInput;
    update: NetworkUpdateInput;
  }) => NetworkPromise;
  deleteNetwork: (where: NetworkWhereUniqueInput) => NetworkPromise;
  deleteManyNetworks: (where?: NetworkWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  agent: (
    where?: AgentSubscriptionWhereInput
  ) => AgentSubscriptionPayloadSubscription;
  endUser: (
    where?: EndUserSubscriptionWhereInput
  ) => EndUserSubscriptionPayloadSubscription;
  network: (
    where?: NetworkSubscriptionWhereInput
  ) => NetworkSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type AgentOrderByInput =
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "id_ASC"
  | "id_DESC"
  | "nickname_ASC"
  | "nickname_DESC"
  | "email_ASC"
  | "email_DESC"
  | "tag_ASC"
  | "tag_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput = "id_ASC" | "id_DESC" | "name_ASC" | "name_DESC";

export type EndUserOrderByInput =
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "email_ASC"
  | "email_DESC"
  | "fullName_ASC"
  | "fullName_DESC"
  | "id_ASC"
  | "id_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type NetworkOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface NetworkUpdateWithWhereUniqueWithoutMasterInput {
  where: NetworkWhereUniqueInput;
  data: NetworkUpdateWithoutMasterDataInput;
}

export type AgentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface AgentUpdateWithWhereUniqueWithoutNetworksInput {
  where: AgentWhereUniqueInput;
  data: AgentUpdateWithoutNetworksDataInput;
}

export interface EndUserWhereInput {
  agents_every?: Maybe<AgentWhereInput>;
  agents_some?: Maybe<AgentWhereInput>;
  agents_none?: Maybe<AgentWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  fullName?: Maybe<String>;
  fullName_not?: Maybe<String>;
  fullName_in?: Maybe<String[] | String>;
  fullName_not_in?: Maybe<String[] | String>;
  fullName_lt?: Maybe<String>;
  fullName_lte?: Maybe<String>;
  fullName_gt?: Maybe<String>;
  fullName_gte?: Maybe<String>;
  fullName_contains?: Maybe<String>;
  fullName_not_contains?: Maybe<String>;
  fullName_starts_with?: Maybe<String>;
  fullName_not_starts_with?: Maybe<String>;
  fullName_ends_with?: Maybe<String>;
  fullName_not_ends_with?: Maybe<String>;
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  users_every?: Maybe<UserWhereInput>;
  users_some?: Maybe<UserWhereInput>;
  users_none?: Maybe<UserWhereInput>;
  AND?: Maybe<EndUserWhereInput[] | EndUserWhereInput>;
  OR?: Maybe<EndUserWhereInput[] | EndUserWhereInput>;
  NOT?: Maybe<EndUserWhereInput[] | EndUserWhereInput>;
}

export interface AgentUpdateWithoutNetworksDataInput {
  endUser?: Maybe<EndUserUpdateOneWithoutAgentsInput>;
  nickname?: Maybe<String>;
  email?: Maybe<String>;
  tag?: Maybe<String>;
  ownedNetworks?: Maybe<NetworkUpdateManyWithoutMasterInput>;
}

export interface NetworkWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  master?: Maybe<AgentWhereInput>;
  slaves_every?: Maybe<AgentWhereInput>;
  slaves_some?: Maybe<AgentWhereInput>;
  slaves_none?: Maybe<AgentWhereInput>;
  AND?: Maybe<NetworkWhereInput[] | NetworkWhereInput>;
  OR?: Maybe<NetworkWhereInput[] | NetworkWhereInput>;
  NOT?: Maybe<NetworkWhereInput[] | NetworkWhereInput>;
}

export interface EndUserUpdateWithoutAgentsDataInput {
  email?: Maybe<String>;
  fullName?: Maybe<String>;
  users?: Maybe<UserUpdateManyWithoutEndUsersInput>;
}

export interface AgentUpdateWithWhereUniqueWithoutEndUserInput {
  where: AgentWhereUniqueInput;
  data: AgentUpdateWithoutEndUserDataInput;
}

export interface UserUpdateManyWithoutEndUsersInput {
  create?: Maybe<
    UserCreateWithoutEndUsersInput[] | UserCreateWithoutEndUsersInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutEndUsersInput[]
    | UserUpdateWithWhereUniqueWithoutEndUsersInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutEndUsersInput[]
    | UserUpsertWithWhereUniqueWithoutEndUsersInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface AgentUpsertWithWhereUniqueWithoutNetworksInput {
  where: AgentWhereUniqueInput;
  update: AgentUpdateWithoutNetworksDataInput;
  create: AgentCreateWithoutNetworksInput;
}

export interface UserUpdateWithWhereUniqueWithoutEndUsersInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutEndUsersDataInput;
}

export interface NetworkSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<NetworkWhereInput>;
  AND?: Maybe<NetworkSubscriptionWhereInput[] | NetworkSubscriptionWhereInput>;
  OR?: Maybe<NetworkSubscriptionWhereInput[] | NetworkSubscriptionWhereInput>;
  NOT?: Maybe<NetworkSubscriptionWhereInput[] | NetworkSubscriptionWhereInput>;
}

export interface UserUpdateWithoutEndUsersDataInput {
  name?: Maybe<String>;
}

export interface AgentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AgentWhereInput>;
  AND?: Maybe<AgentSubscriptionWhereInput[] | AgentSubscriptionWhereInput>;
  OR?: Maybe<AgentSubscriptionWhereInput[] | AgentSubscriptionWhereInput>;
  NOT?: Maybe<AgentSubscriptionWhereInput[] | AgentSubscriptionWhereInput>;
}

export interface UserUpsertWithWhereUniqueWithoutEndUsersInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutEndUsersDataInput;
  create: UserCreateWithoutEndUsersInput;
}

export interface EndUserUpdateManyDataInput {
  email?: Maybe<String>;
  fullName?: Maybe<String>;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface EndUserScalarWhereInput {
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  fullName?: Maybe<String>;
  fullName_not?: Maybe<String>;
  fullName_in?: Maybe<String[] | String>;
  fullName_not_in?: Maybe<String[] | String>;
  fullName_lt?: Maybe<String>;
  fullName_lte?: Maybe<String>;
  fullName_gt?: Maybe<String>;
  fullName_gte?: Maybe<String>;
  fullName_contains?: Maybe<String>;
  fullName_not_contains?: Maybe<String>;
  fullName_starts_with?: Maybe<String>;
  fullName_not_starts_with?: Maybe<String>;
  fullName_ends_with?: Maybe<String>;
  fullName_not_ends_with?: Maybe<String>;
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<EndUserScalarWhereInput[] | EndUserScalarWhereInput>;
  OR?: Maybe<EndUserScalarWhereInput[] | EndUserScalarWhereInput>;
  NOT?: Maybe<EndUserScalarWhereInput[] | EndUserScalarWhereInput>;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export type EndUserWhereUniqueInput = AtLeastOne<{
  email: Maybe<String>;
  id?: Maybe<ID_Input>;
}>;

export interface UserUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface EndUserUpdateWithWhereUniqueWithoutUsersInput {
  where: EndUserWhereUniqueInput;
  data: EndUserUpdateWithoutUsersDataInput;
}

export interface EndUserUpsertWithoutAgentsInput {
  update: EndUserUpdateWithoutAgentsDataInput;
  create: EndUserCreateWithoutAgentsInput;
}

export type NetworkWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface NetworkUpdateManyWithoutMasterInput {
  create?: Maybe<
    NetworkCreateWithoutMasterInput[] | NetworkCreateWithoutMasterInput
  >;
  delete?: Maybe<NetworkWhereUniqueInput[] | NetworkWhereUniqueInput>;
  connect?: Maybe<NetworkWhereUniqueInput[] | NetworkWhereUniqueInput>;
  set?: Maybe<NetworkWhereUniqueInput[] | NetworkWhereUniqueInput>;
  disconnect?: Maybe<NetworkWhereUniqueInput[] | NetworkWhereUniqueInput>;
  update?: Maybe<
    | NetworkUpdateWithWhereUniqueWithoutMasterInput[]
    | NetworkUpdateWithWhereUniqueWithoutMasterInput
  >;
  upsert?: Maybe<
    | NetworkUpsertWithWhereUniqueWithoutMasterInput[]
    | NetworkUpsertWithWhereUniqueWithoutMasterInput
  >;
  deleteMany?: Maybe<NetworkScalarWhereInput[] | NetworkScalarWhereInput>;
  updateMany?: Maybe<
    | NetworkUpdateManyWithWhereNestedInput[]
    | NetworkUpdateManyWithWhereNestedInput
  >;
}

export interface EndUserCreateWithoutUsersInput {
  agents?: Maybe<AgentCreateManyWithoutEndUserInput>;
  email: String;
  fullName?: Maybe<String>;
}

export interface NetworkCreateInput {
  name: String;
  description?: Maybe<String>;
  master: AgentCreateOneWithoutOwnedNetworksInput;
  slaves?: Maybe<AgentCreateManyWithoutNetworksInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface NetworkUpdateWithoutMasterDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  slaves?: Maybe<AgentUpdateManyWithoutNetworksInput>;
}

export interface NetworkUpdateManyMutationInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface AgentUpdateManyWithoutNetworksInput {
  create?: Maybe<
    AgentCreateWithoutNetworksInput[] | AgentCreateWithoutNetworksInput
  >;
  delete?: Maybe<AgentWhereUniqueInput[] | AgentWhereUniqueInput>;
  connect?: Maybe<AgentWhereUniqueInput[] | AgentWhereUniqueInput>;
  set?: Maybe<AgentWhereUniqueInput[] | AgentWhereUniqueInput>;
  disconnect?: Maybe<AgentWhereUniqueInput[] | AgentWhereUniqueInput>;
  update?: Maybe<
    | AgentUpdateWithWhereUniqueWithoutNetworksInput[]
    | AgentUpdateWithWhereUniqueWithoutNetworksInput
  >;
  upsert?: Maybe<
    | AgentUpsertWithWhereUniqueWithoutNetworksInput[]
    | AgentUpsertWithWhereUniqueWithoutNetworksInput
  >;
  deleteMany?: Maybe<AgentScalarWhereInput[] | AgentScalarWhereInput>;
  updateMany?: Maybe<
    AgentUpdateManyWithWhereNestedInput[] | AgentUpdateManyWithWhereNestedInput
  >;
}

export interface EndUserCreateOneWithoutAgentsInput {
  create?: Maybe<EndUserCreateWithoutAgentsInput>;
  connect?: Maybe<EndUserWhereUniqueInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  endUsers_every?: Maybe<EndUserWhereInput>;
  endUsers_some?: Maybe<EndUserWhereInput>;
  endUsers_none?: Maybe<EndUserWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface UserCreateManyWithoutEndUsersInput {
  create?: Maybe<
    UserCreateWithoutEndUsersInput[] | UserCreateWithoutEndUsersInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface AgentWhereInput {
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  endUser?: Maybe<EndUserWhereInput>;
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  nickname?: Maybe<String>;
  nickname_not?: Maybe<String>;
  nickname_in?: Maybe<String[] | String>;
  nickname_not_in?: Maybe<String[] | String>;
  nickname_lt?: Maybe<String>;
  nickname_lte?: Maybe<String>;
  nickname_gt?: Maybe<String>;
  nickname_gte?: Maybe<String>;
  nickname_contains?: Maybe<String>;
  nickname_not_contains?: Maybe<String>;
  nickname_starts_with?: Maybe<String>;
  nickname_not_starts_with?: Maybe<String>;
  nickname_ends_with?: Maybe<String>;
  nickname_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  tag?: Maybe<String>;
  tag_not?: Maybe<String>;
  tag_in?: Maybe<String[] | String>;
  tag_not_in?: Maybe<String[] | String>;
  tag_lt?: Maybe<String>;
  tag_lte?: Maybe<String>;
  tag_gt?: Maybe<String>;
  tag_gte?: Maybe<String>;
  tag_contains?: Maybe<String>;
  tag_not_contains?: Maybe<String>;
  tag_starts_with?: Maybe<String>;
  tag_not_starts_with?: Maybe<String>;
  tag_ends_with?: Maybe<String>;
  tag_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  ownedNetworks_every?: Maybe<NetworkWhereInput>;
  ownedNetworks_some?: Maybe<NetworkWhereInput>;
  ownedNetworks_none?: Maybe<NetworkWhereInput>;
  networks_every?: Maybe<NetworkWhereInput>;
  networks_some?: Maybe<NetworkWhereInput>;
  networks_none?: Maybe<NetworkWhereInput>;
  AND?: Maybe<AgentWhereInput[] | AgentWhereInput>;
  OR?: Maybe<AgentWhereInput[] | AgentWhereInput>;
  NOT?: Maybe<AgentWhereInput[] | AgentWhereInput>;
}

export interface NetworkCreateManyWithoutMasterInput {
  create?: Maybe<
    NetworkCreateWithoutMasterInput[] | NetworkCreateWithoutMasterInput
  >;
  connect?: Maybe<NetworkWhereUniqueInput[] | NetworkWhereUniqueInput>;
}

export interface EndUserUpdateManyMutationInput {
  email?: Maybe<String>;
  fullName?: Maybe<String>;
}

export interface AgentCreateManyWithoutNetworksInput {
  create?: Maybe<
    AgentCreateWithoutNetworksInput[] | AgentCreateWithoutNetworksInput
  >;
  connect?: Maybe<AgentWhereUniqueInput[] | AgentWhereUniqueInput>;
}

export interface AgentScalarWhereInput {
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  nickname?: Maybe<String>;
  nickname_not?: Maybe<String>;
  nickname_in?: Maybe<String[] | String>;
  nickname_not_in?: Maybe<String[] | String>;
  nickname_lt?: Maybe<String>;
  nickname_lte?: Maybe<String>;
  nickname_gt?: Maybe<String>;
  nickname_gte?: Maybe<String>;
  nickname_contains?: Maybe<String>;
  nickname_not_contains?: Maybe<String>;
  nickname_starts_with?: Maybe<String>;
  nickname_not_starts_with?: Maybe<String>;
  nickname_ends_with?: Maybe<String>;
  nickname_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  tag?: Maybe<String>;
  tag_not?: Maybe<String>;
  tag_in?: Maybe<String[] | String>;
  tag_not_in?: Maybe<String[] | String>;
  tag_lt?: Maybe<String>;
  tag_lte?: Maybe<String>;
  tag_gt?: Maybe<String>;
  tag_gte?: Maybe<String>;
  tag_contains?: Maybe<String>;
  tag_not_contains?: Maybe<String>;
  tag_starts_with?: Maybe<String>;
  tag_not_starts_with?: Maybe<String>;
  tag_ends_with?: Maybe<String>;
  tag_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<AgentScalarWhereInput[] | AgentScalarWhereInput>;
  OR?: Maybe<AgentScalarWhereInput[] | AgentScalarWhereInput>;
  NOT?: Maybe<AgentScalarWhereInput[] | AgentScalarWhereInput>;
}

export interface NetworkCreateManyWithoutSlavesInput {
  create?: Maybe<
    NetworkCreateWithoutSlavesInput[] | NetworkCreateWithoutSlavesInput
  >;
  connect?: Maybe<NetworkWhereUniqueInput[] | NetworkWhereUniqueInput>;
}

export interface AgentUpdateManyWithWhereNestedInput {
  where: AgentScalarWhereInput;
  data: AgentUpdateManyDataInput;
}

export interface AgentCreateOneWithoutOwnedNetworksInput {
  create?: Maybe<AgentCreateWithoutOwnedNetworksInput>;
  connect?: Maybe<AgentWhereUniqueInput>;
}

export interface AgentUpdateManyDataInput {
  nickname?: Maybe<String>;
  email?: Maybe<String>;
  tag?: Maybe<String>;
}

export interface AgentUpdateInput {
  endUser?: Maybe<EndUserUpdateOneWithoutAgentsInput>;
  nickname?: Maybe<String>;
  email?: Maybe<String>;
  tag?: Maybe<String>;
  ownedNetworks?: Maybe<NetworkUpdateManyWithoutMasterInput>;
  networks?: Maybe<NetworkUpdateManyWithoutSlavesInput>;
}

export interface NetworkUpsertWithWhereUniqueWithoutMasterInput {
  where: NetworkWhereUniqueInput;
  update: NetworkUpdateWithoutMasterDataInput;
  create: NetworkCreateWithoutMasterInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NetworkScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  AND?: Maybe<NetworkScalarWhereInput[] | NetworkScalarWhereInput>;
  OR?: Maybe<NetworkScalarWhereInput[] | NetworkScalarWhereInput>;
  NOT?: Maybe<NetworkScalarWhereInput[] | NetworkScalarWhereInput>;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface NetworkUpdateManyWithWhereNestedInput {
  where: NetworkScalarWhereInput;
  data: NetworkUpdateManyDataInput;
}

export interface EndUserUpsertWithWhereUniqueWithoutUsersInput {
  where: EndUserWhereUniqueInput;
  update: EndUserUpdateWithoutUsersDataInput;
  create: EndUserCreateWithoutUsersInput;
}

export interface NetworkUpdateManyDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface EndUserUpdateManyWithoutUsersInput {
  create?: Maybe<
    EndUserCreateWithoutUsersInput[] | EndUserCreateWithoutUsersInput
  >;
  delete?: Maybe<EndUserWhereUniqueInput[] | EndUserWhereUniqueInput>;
  connect?: Maybe<EndUserWhereUniqueInput[] | EndUserWhereUniqueInput>;
  set?: Maybe<EndUserWhereUniqueInput[] | EndUserWhereUniqueInput>;
  disconnect?: Maybe<EndUserWhereUniqueInput[] | EndUserWhereUniqueInput>;
  update?: Maybe<
    | EndUserUpdateWithWhereUniqueWithoutUsersInput[]
    | EndUserUpdateWithWhereUniqueWithoutUsersInput
  >;
  upsert?: Maybe<
    | EndUserUpsertWithWhereUniqueWithoutUsersInput[]
    | EndUserUpsertWithWhereUniqueWithoutUsersInput
  >;
  deleteMany?: Maybe<EndUserScalarWhereInput[] | EndUserScalarWhereInput>;
  updateMany?: Maybe<
    | EndUserUpdateManyWithWhereNestedInput[]
    | EndUserUpdateManyWithWhereNestedInput
  >;
}

export interface NetworkUpdateManyWithoutSlavesInput {
  create?: Maybe<
    NetworkCreateWithoutSlavesInput[] | NetworkCreateWithoutSlavesInput
  >;
  delete?: Maybe<NetworkWhereUniqueInput[] | NetworkWhereUniqueInput>;
  connect?: Maybe<NetworkWhereUniqueInput[] | NetworkWhereUniqueInput>;
  set?: Maybe<NetworkWhereUniqueInput[] | NetworkWhereUniqueInput>;
  disconnect?: Maybe<NetworkWhereUniqueInput[] | NetworkWhereUniqueInput>;
  update?: Maybe<
    | NetworkUpdateWithWhereUniqueWithoutSlavesInput[]
    | NetworkUpdateWithWhereUniqueWithoutSlavesInput
  >;
  upsert?: Maybe<
    | NetworkUpsertWithWhereUniqueWithoutSlavesInput[]
    | NetworkUpsertWithWhereUniqueWithoutSlavesInput
  >;
  deleteMany?: Maybe<NetworkScalarWhereInput[] | NetworkScalarWhereInput>;
  updateMany?: Maybe<
    | NetworkUpdateManyWithWhereNestedInput[]
    | NetworkUpdateManyWithWhereNestedInput
  >;
}

export interface EndUserCreateManyWithoutUsersInput {
  create?: Maybe<
    EndUserCreateWithoutUsersInput[] | EndUserCreateWithoutUsersInput
  >;
  connect?: Maybe<EndUserWhereUniqueInput[] | EndUserWhereUniqueInput>;
}

export interface NetworkUpdateWithWhereUniqueWithoutSlavesInput {
  where: NetworkWhereUniqueInput;
  data: NetworkUpdateWithoutSlavesDataInput;
}

export interface NetworkUpdateInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  master?: Maybe<AgentUpdateOneRequiredWithoutOwnedNetworksInput>;
  slaves?: Maybe<AgentUpdateManyWithoutNetworksInput>;
}

export interface NetworkUpdateWithoutSlavesDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  master?: Maybe<AgentUpdateOneRequiredWithoutOwnedNetworksInput>;
}

export interface EndUserCreateWithoutAgentsInput {
  email: String;
  fullName?: Maybe<String>;
  users?: Maybe<UserCreateManyWithoutEndUsersInput>;
}

export interface AgentUpdateOneRequiredWithoutOwnedNetworksInput {
  create?: Maybe<AgentCreateWithoutOwnedNetworksInput>;
  update?: Maybe<AgentUpdateWithoutOwnedNetworksDataInput>;
  upsert?: Maybe<AgentUpsertWithoutOwnedNetworksInput>;
  connect?: Maybe<AgentWhereUniqueInput>;
}

export interface NetworkCreateWithoutMasterInput {
  name: String;
  description?: Maybe<String>;
  slaves?: Maybe<AgentCreateManyWithoutNetworksInput>;
}

export interface AgentUpdateWithoutOwnedNetworksDataInput {
  endUser?: Maybe<EndUserUpdateOneWithoutAgentsInput>;
  nickname?: Maybe<String>;
  email?: Maybe<String>;
  tag?: Maybe<String>;
  networks?: Maybe<NetworkUpdateManyWithoutSlavesInput>;
}

export interface NetworkCreateWithoutSlavesInput {
  name: String;
  description?: Maybe<String>;
  master: AgentCreateOneWithoutOwnedNetworksInput;
}

export interface AgentUpsertWithoutOwnedNetworksInput {
  update: AgentUpdateWithoutOwnedNetworksDataInput;
  create: AgentCreateWithoutOwnedNetworksInput;
}

export interface EndUserUpdateOneWithoutAgentsInput {
  create?: Maybe<EndUserCreateWithoutAgentsInput>;
  update?: Maybe<EndUserUpdateWithoutAgentsDataInput>;
  upsert?: Maybe<EndUserUpsertWithoutAgentsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<EndUserWhereUniqueInput>;
}

export interface NetworkUpsertWithWhereUniqueWithoutSlavesInput {
  where: NetworkWhereUniqueInput;
  update: NetworkUpdateWithoutSlavesDataInput;
  create: NetworkCreateWithoutSlavesInput;
}

export interface EndUserUpdateManyWithWhereNestedInput {
  where: EndUserScalarWhereInput;
  data: EndUserUpdateManyDataInput;
}

export interface AgentUpdateManyMutationInput {
  nickname?: Maybe<String>;
  email?: Maybe<String>;
  tag?: Maybe<String>;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  endUsers?: Maybe<EndUserUpdateManyWithoutUsersInput>;
}

export interface AgentUpsertWithWhereUniqueWithoutEndUserInput {
  where: AgentWhereUniqueInput;
  update: AgentUpdateWithoutEndUserDataInput;
  create: AgentCreateWithoutEndUserInput;
}

export interface AgentCreateInput {
  endUser?: Maybe<EndUserCreateOneWithoutAgentsInput>;
  nickname: String;
  email: String;
  tag?: Maybe<String>;
  ownedNetworks?: Maybe<NetworkCreateManyWithoutMasterInput>;
  networks?: Maybe<NetworkCreateManyWithoutSlavesInput>;
}

export interface AgentUpdateWithoutEndUserDataInput {
  nickname?: Maybe<String>;
  email?: Maybe<String>;
  tag?: Maybe<String>;
  ownedNetworks?: Maybe<NetworkUpdateManyWithoutMasterInput>;
  networks?: Maybe<NetworkUpdateManyWithoutSlavesInput>;
}

export interface AgentCreateWithoutNetworksInput {
  endUser?: Maybe<EndUserCreateOneWithoutAgentsInput>;
  nickname: String;
  email: String;
  tag?: Maybe<String>;
  ownedNetworks?: Maybe<NetworkCreateManyWithoutMasterInput>;
}

export interface EndUserCreateInput {
  agents?: Maybe<AgentCreateManyWithoutEndUserInput>;
  email: String;
  fullName?: Maybe<String>;
  users?: Maybe<UserCreateManyWithoutEndUsersInput>;
}

export interface EndUserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<EndUserWhereInput>;
  AND?: Maybe<EndUserSubscriptionWhereInput[] | EndUserSubscriptionWhereInput>;
  OR?: Maybe<EndUserSubscriptionWhereInput[] | EndUserSubscriptionWhereInput>;
  NOT?: Maybe<EndUserSubscriptionWhereInput[] | EndUserSubscriptionWhereInput>;
}

export interface AgentUpdateManyWithoutEndUserInput {
  create?: Maybe<
    AgentCreateWithoutEndUserInput[] | AgentCreateWithoutEndUserInput
  >;
  delete?: Maybe<AgentWhereUniqueInput[] | AgentWhereUniqueInput>;
  connect?: Maybe<AgentWhereUniqueInput[] | AgentWhereUniqueInput>;
  set?: Maybe<AgentWhereUniqueInput[] | AgentWhereUniqueInput>;
  disconnect?: Maybe<AgentWhereUniqueInput[] | AgentWhereUniqueInput>;
  update?: Maybe<
    | AgentUpdateWithWhereUniqueWithoutEndUserInput[]
    | AgentUpdateWithWhereUniqueWithoutEndUserInput
  >;
  upsert?: Maybe<
    | AgentUpsertWithWhereUniqueWithoutEndUserInput[]
    | AgentUpsertWithWhereUniqueWithoutEndUserInput
  >;
  deleteMany?: Maybe<AgentScalarWhereInput[] | AgentScalarWhereInput>;
  updateMany?: Maybe<
    AgentUpdateManyWithWhereNestedInput[] | AgentUpdateManyWithWhereNestedInput
  >;
}

export interface EndUserUpdateInput {
  agents?: Maybe<AgentUpdateManyWithoutEndUserInput>;
  email?: Maybe<String>;
  fullName?: Maybe<String>;
  users?: Maybe<UserUpdateManyWithoutEndUsersInput>;
}

export interface AgentCreateWithoutEndUserInput {
  nickname: String;
  email: String;
  tag?: Maybe<String>;
  ownedNetworks?: Maybe<NetworkCreateManyWithoutMasterInput>;
  networks?: Maybe<NetworkCreateManyWithoutSlavesInput>;
}

export interface AgentCreateManyWithoutEndUserInput {
  create?: Maybe<
    AgentCreateWithoutEndUserInput[] | AgentCreateWithoutEndUserInput
  >;
  connect?: Maybe<AgentWhereUniqueInput[] | AgentWhereUniqueInput>;
}

export interface EndUserUpdateWithoutUsersDataInput {
  agents?: Maybe<AgentUpdateManyWithoutEndUserInput>;
  email?: Maybe<String>;
  fullName?: Maybe<String>;
}

export interface AgentCreateWithoutOwnedNetworksInput {
  endUser?: Maybe<EndUserCreateOneWithoutAgentsInput>;
  nickname: String;
  email: String;
  tag?: Maybe<String>;
  networks?: Maybe<NetworkCreateManyWithoutSlavesInput>;
}

export interface UserCreateWithoutEndUsersInput {
  name?: Maybe<String>;
}

export interface UserCreateInput {
  name?: Maybe<String>;
  endUsers?: Maybe<EndUserCreateManyWithoutUsersInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  name?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface AgentEdge {
  node: Agent;
  cursor: String;
}

export interface AgentEdgePromise extends Promise<AgentEdge>, Fragmentable {
  node: <T = AgentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AgentEdgeSubscription
  extends Promise<AsyncIterator<AgentEdge>>,
    Fragmentable {
  node: <T = AgentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface NetworkSubscriptionPayload {
  mutation: MutationType;
  node: Network;
  updatedFields: String[];
  previousValues: NetworkPreviousValues;
}

export interface NetworkSubscriptionPayloadPromise
  extends Promise<NetworkSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = NetworkPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = NetworkPreviousValuesPromise>() => T;
}

export interface NetworkSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<NetworkSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = NetworkSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = NetworkPreviousValuesSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AgentConnection {
  pageInfo: PageInfo;
  edges: AgentEdge[];
}

export interface AgentConnectionPromise
  extends Promise<AgentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AgentEdge>>() => T;
  aggregate: <T = AggregateAgentPromise>() => T;
}

export interface AgentConnectionSubscription
  extends Promise<AsyncIterator<AgentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AgentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAgentSubscription>() => T;
}

export interface AggregateNetwork {
  count: Int;
}

export interface AggregateNetworkPromise
  extends Promise<AggregateNetwork>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateNetworkSubscription
  extends Promise<AsyncIterator<AggregateNetwork>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Network {
  id: ID_Output;
  name: String;
  description?: String;
}

export interface NetworkPromise extends Promise<Network>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  master: <T = AgentPromise>() => T;
  slaves: <T = FragmentableArray<Agent>>(args?: {
    where?: AgentWhereInput;
    orderBy?: AgentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface NetworkSubscription
  extends Promise<AsyncIterator<Network>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  master: <T = AgentSubscription>() => T;
  slaves: <T = Promise<AsyncIterator<AgentSubscription>>>(args?: {
    where?: AgentWhereInput;
    orderBy?: AgentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface NetworkNullablePromise
  extends Promise<Network | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  master: <T = AgentPromise>() => T;
  slaves: <T = FragmentableArray<Agent>>(args?: {
    where?: AgentWhereInput;
    orderBy?: AgentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface NetworkConnection {
  pageInfo: PageInfo;
  edges: NetworkEdge[];
}

export interface NetworkConnectionPromise
  extends Promise<NetworkConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<NetworkEdge>>() => T;
  aggregate: <T = AggregateNetworkPromise>() => T;
}

export interface NetworkConnectionSubscription
  extends Promise<AsyncIterator<NetworkConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<NetworkEdgeSubscription>>>() => T;
  aggregate: <T = AggregateNetworkSubscription>() => T;
}

export interface User {
  id: ID_Output;
  name?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  endUsers: <T = FragmentableArray<EndUser>>(args?: {
    where?: EndUserWhereInput;
    orderBy?: EndUserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  endUsers: <T = Promise<AsyncIterator<EndUserSubscription>>>(args?: {
    where?: EndUserWhereInput;
    orderBy?: EndUserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  endUsers: <T = FragmentableArray<EndUser>>(args?: {
    where?: EndUserWhereInput;
    orderBy?: EndUserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface EndUserEdge {
  node: EndUser;
  cursor: String;
}

export interface EndUserEdgePromise extends Promise<EndUserEdge>, Fragmentable {
  node: <T = EndUserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface EndUserEdgeSubscription
  extends Promise<AsyncIterator<EndUserEdge>>,
    Fragmentable {
  node: <T = EndUserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AgentSubscriptionPayload {
  mutation: MutationType;
  node: Agent;
  updatedFields: String[];
  previousValues: AgentPreviousValues;
}

export interface AgentSubscriptionPayloadPromise
  extends Promise<AgentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AgentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AgentPreviousValuesPromise>() => T;
}

export interface AgentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AgentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AgentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AgentPreviousValuesSubscription>() => T;
}

export interface AggregateAgent {
  count: Int;
}

export interface AggregateAgentPromise
  extends Promise<AggregateAgent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAgentSubscription
  extends Promise<AsyncIterator<AggregateAgent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AgentPreviousValues {
  createdAt: DateTimeOutput;
  id: ID_Output;
  nickname: String;
  email: String;
  tag?: String;
  updatedAt: DateTimeOutput;
}

export interface AgentPreviousValuesPromise
  extends Promise<AgentPreviousValues>,
    Fragmentable {
  createdAt: () => Promise<DateTimeOutput>;
  id: () => Promise<ID_Output>;
  nickname: () => Promise<String>;
  email: () => Promise<String>;
  tag: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface AgentPreviousValuesSubscription
  extends Promise<AsyncIterator<AgentPreviousValues>>,
    Fragmentable {
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  id: () => Promise<AsyncIterator<ID_Output>>;
  nickname: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  tag: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface NetworkPreviousValues {
  id: ID_Output;
  name: String;
  description?: String;
}

export interface NetworkPreviousValuesPromise
  extends Promise<NetworkPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
}

export interface NetworkPreviousValuesSubscription
  extends Promise<AsyncIterator<NetworkPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface EndUserPreviousValues {
  createdAt: DateTimeOutput;
  email: String;
  fullName?: String;
  id: ID_Output;
  updatedAt: DateTimeOutput;
}

export interface EndUserPreviousValuesPromise
  extends Promise<EndUserPreviousValues>,
    Fragmentable {
  createdAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  fullName: () => Promise<String>;
  id: () => Promise<ID_Output>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface EndUserPreviousValuesSubscription
  extends Promise<AsyncIterator<EndUserPreviousValues>>,
    Fragmentable {
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  fullName: () => Promise<AsyncIterator<String>>;
  id: () => Promise<AsyncIterator<ID_Output>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface EndUserSubscriptionPayload {
  mutation: MutationType;
  node: EndUser;
  updatedFields: String[];
  previousValues: EndUserPreviousValues;
}

export interface EndUserSubscriptionPayloadPromise
  extends Promise<EndUserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EndUserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EndUserPreviousValuesPromise>() => T;
}

export interface EndUserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EndUserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EndUserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EndUserPreviousValuesSubscription>() => T;
}

export interface Agent {
  createdAt: DateTimeOutput;
  id: ID_Output;
  nickname: String;
  email: String;
  tag?: String;
  updatedAt: DateTimeOutput;
}

export interface AgentPromise extends Promise<Agent>, Fragmentable {
  createdAt: () => Promise<DateTimeOutput>;
  endUser: <T = EndUserPromise>() => T;
  id: () => Promise<ID_Output>;
  nickname: () => Promise<String>;
  email: () => Promise<String>;
  tag: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  ownedNetworks: <T = FragmentableArray<Network>>(args?: {
    where?: NetworkWhereInput;
    orderBy?: NetworkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  networks: <T = FragmentableArray<Network>>(args?: {
    where?: NetworkWhereInput;
    orderBy?: NetworkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AgentSubscription
  extends Promise<AsyncIterator<Agent>>,
    Fragmentable {
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  endUser: <T = EndUserSubscription>() => T;
  id: () => Promise<AsyncIterator<ID_Output>>;
  nickname: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  tag: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  ownedNetworks: <T = Promise<AsyncIterator<NetworkSubscription>>>(args?: {
    where?: NetworkWhereInput;
    orderBy?: NetworkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  networks: <T = Promise<AsyncIterator<NetworkSubscription>>>(args?: {
    where?: NetworkWhereInput;
    orderBy?: NetworkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AgentNullablePromise
  extends Promise<Agent | null>,
    Fragmentable {
  createdAt: () => Promise<DateTimeOutput>;
  endUser: <T = EndUserPromise>() => T;
  id: () => Promise<ID_Output>;
  nickname: () => Promise<String>;
  email: () => Promise<String>;
  tag: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  ownedNetworks: <T = FragmentableArray<Network>>(args?: {
    where?: NetworkWhereInput;
    orderBy?: NetworkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  networks: <T = FragmentableArray<Network>>(args?: {
    where?: NetworkWhereInput;
    orderBy?: NetworkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface EndUser {
  createdAt: DateTimeOutput;
  email: String;
  fullName?: String;
  id: ID_Output;
  updatedAt: DateTimeOutput;
}

export interface EndUserPromise extends Promise<EndUser>, Fragmentable {
  agents: <T = FragmentableArray<Agent>>(args?: {
    where?: AgentWhereInput;
    orderBy?: AgentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  fullName: () => Promise<String>;
  id: () => Promise<ID_Output>;
  updatedAt: () => Promise<DateTimeOutput>;
  users: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface EndUserSubscription
  extends Promise<AsyncIterator<EndUser>>,
    Fragmentable {
  agents: <T = Promise<AsyncIterator<AgentSubscription>>>(args?: {
    where?: AgentWhereInput;
    orderBy?: AgentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  fullName: () => Promise<AsyncIterator<String>>;
  id: () => Promise<AsyncIterator<ID_Output>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  users: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface EndUserNullablePromise
  extends Promise<EndUser | null>,
    Fragmentable {
  agents: <T = FragmentableArray<Agent>>(args?: {
    where?: AgentWhereInput;
    orderBy?: AgentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  fullName: () => Promise<String>;
  id: () => Promise<ID_Output>;
  updatedAt: () => Promise<DateTimeOutput>;
  users: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface EndUserConnection {
  pageInfo: PageInfo;
  edges: EndUserEdge[];
}

export interface EndUserConnectionPromise
  extends Promise<EndUserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EndUserEdge>>() => T;
  aggregate: <T = AggregateEndUserPromise>() => T;
}

export interface EndUserConnectionSubscription
  extends Promise<AsyncIterator<EndUserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EndUserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEndUserSubscription>() => T;
}

export interface AggregateEndUser {
  count: Int;
}

export interface AggregateEndUserPromise
  extends Promise<AggregateEndUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEndUserSubscription
  extends Promise<AsyncIterator<AggregateEndUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface NetworkEdge {
  node: Network;
  cursor: String;
}

export interface NetworkEdgePromise extends Promise<NetworkEdge>, Fragmentable {
  node: <T = NetworkPromise>() => T;
  cursor: () => Promise<String>;
}

export interface NetworkEdgeSubscription
  extends Promise<AsyncIterator<NetworkEdge>>,
    Fragmentable {
  node: <T = NetworkSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Agent",
    embedded: false
  },
  {
    name: "EndUser",
    embedded: false
  },
  {
    name: "Network",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `https://yakapa-api-0587a23090.herokuapp.com/api/dev`
});
export const prisma = new Prisma();
